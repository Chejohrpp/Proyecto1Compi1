
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.reglasGram;

import backend.objetos.*;
import java_cup.runtime.*;
import backend.reglasGram.symUser.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserUser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symUser.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserUser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserUser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserUser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\006\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\004\004\000\002\005\005\000\002\005\003\000" +
    "\002\006\011\000\002\007\007\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\007\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\013\007" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\007\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\003\005\004\004\001\002\000\004\005" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\006\003\011\010" +
    "\012\001\002\000\010\003\021\005\022\007\ufff9\001\002" +
    "\000\004\011\107\001\002\000\010\003\011\006\105\010" +
    "\012\001\002\000\010\003\ufffd\006\ufffd\010\ufffd\001\002" +
    "\000\004\007\016\001\002\000\004\012\017\001\002\000" +
    "\006\003\021\005\022\001\002\000\004\014\041\001\002" +
    "\000\004\014\ufff6\001\002\000\006\003\025\010\026\001" +
    "\002\000\004\013\024\001\002\000\010\003\ufffc\006\ufffc" +
    "\010\ufffc\001\002\000\004\007\ufff4\001\002\000\004\015" +
    "\037\001\002\000\004\007\030\001\002\000\006\003\031" +
    "\010\032\001\002\000\004\006\uffe6\001\002\000\004\021" +
    "\035\001\002\000\004\006\034\001\002\000\004\014\ufff7" +
    "\001\002\000\004\010\036\001\002\000\004\006\uffe7\001" +
    "\002\000\004\010\040\001\002\000\004\007\ufff5\001\002" +
    "\000\006\003\042\005\044\001\002\000\004\014\ufff2\001" +
    "\002\000\004\014\055\001\002\000\006\003\046\010\047" +
    "\001\002\000\004\007\052\001\002\000\004\007\ufff0\001" +
    "\002\000\004\016\050\001\002\000\004\010\051\001\002" +
    "\000\004\007\ufff1\001\002\000\006\003\031\010\032\001" +
    "\002\000\004\006\054\001\002\000\004\014\ufff3\001\002" +
    "\000\006\003\057\005\060\001\002\000\004\014\071\001" +
    "\002\000\004\014\uffee\001\002\000\006\003\062\010\063" +
    "\001\002\000\004\007\066\001\002\000\004\007\uffec\001" +
    "\002\000\004\017\064\001\002\000\004\010\065\001\002" +
    "\000\004\007\uffed\001\002\000\006\003\031\010\032\001" +
    "\002\000\004\006\070\001\002\000\004\014\uffef\001\002" +
    "\000\006\003\072\005\074\001\002\000\012\003\uffea\006" +
    "\uffea\010\uffea\013\uffea\001\002\000\012\003\ufff8\006\ufff8" +
    "\010\ufff8\013\ufff8\001\002\000\006\003\075\010\076\001" +
    "\002\000\004\007\uffe8\001\002\000\004\020\103\001\002" +
    "\000\004\007\100\001\002\000\006\003\031\010\032\001" +
    "\002\000\004\006\102\001\002\000\012\003\uffeb\006\uffeb" +
    "\010\uffeb\013\uffeb\001\002\000\004\010\104\001\002\000" +
    "\004\007\uffe9\001\002\000\004\002\001\001\002\000\010" +
    "\003\ufffe\006\ufffe\010\ufffe\001\002\000\004\010\110\001" +
    "\002\000\004\007\ufffa\001\002\000\010\003\ufffb\006\ufffb" +
    "\010\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\012\004\013\005\014\001\001\000\006\006\110\007" +
    "\017\001\001\000\002\001\001\000\006\004\105\005\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\022\007\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserUser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserUser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserUser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Usuario> listaUsuarios;
	private List<String> listaErrores;

	public ParserUser(LexerUser lex){
		super(lex);
		listaUsuarios = new ArrayList<Usuario>();
		listaErrores = new ArrayList<String>();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" }" ;
			listaErrores.add(msgError);
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(Elerror);	
	}

	public List getListaUsuarios(){
		return listaUsuarios;
	}
	public List getListaErrores(){
		return listaErrores;
	}
	private void llenarLista(Token user, Token pass, Token fechaCreacion, Token fechaModificacion){
		String userName = user.getLexema();
		String password = pass.getLexema();
		String fechaC = fechaCreacion.getLexema();
		String fechaM = fechaModificacion.getLexema();
		if(fechaM.equals("null")){
			fechaModificacion = null;
		}
		Usuario usuario = new Usuario(userName,password,fechaC,fechaM);
		listaUsuarios.add(usuario);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserUser$actions {
  private final ParserUser parser;

  /** Constructor */
  CUP$ParserUser$actions(ParserUser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserUser$do_action_part00000000(
    int                        CUP$ParserUser$act_num,
    java_cup.runtime.lr_parser CUP$ParserUser$parser,
    java.util.Stack            CUP$ParserUser$stack,
    int                        CUP$ParserUser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserUser$result;

      /* select the action based on the action number */
      switch (CUP$ParserUser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DB_USERS LLAI usuarios LLAD 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-3)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = start_val;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserUser$parser.done_parsing();
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usuarios ::= usuarios usuario 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuarios",1, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usuarios ::= usuario 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuarios",1, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // usuario ::= usuario_comillas DOS_PUNTOS CORI contenido CORD 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuario",2, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // usuario ::= error contenido 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuario",2, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // usuario_comillas ::= COMILLA USUARIO COMILLA 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuario_comillas",3, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // usuario_comillas ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("usuario_comillas",3, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido ::= user COMA pass COMA fecha_creacion COMA fecha_modificacion 
            {
              Token RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-6)).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)).right;
		Token fc = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()).right;
		Token fm = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.peek()).value;
		llenarLista(u,p,fc,fm);
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("contenido",4, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-6)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // user ::= LLAI user_comillas DOS_PUNTOS dato LLAD 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = d;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("user",5, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // user ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("user",5, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // user_comillas ::= COMILLA USER COMILLA 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("user_comillas",6, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // user_comillas ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("user_comillas",6, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pass ::= LLAI pass_comillas DOS_PUNTOS dato LLAD 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = d;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("pass",7, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pass ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("pass",7, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pass_comillas ::= COMILLA PASS COMILLA 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("pass_comillas",8, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pass_comillas ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("pass_comillas",8, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fecha_creacion ::= LLAI fecha_creacion_comillas DOS_PUNTOS dato LLAD 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = d;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fecha_creacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fecha_creacion_comillas ::= COMILLA FECHA_CREACION COMILLA 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_creacion_comillas",10, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fecha_creacion_comillas ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_creacion_comillas",10, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fecha_modificacion ::= LLAI fecha_modificacion_comillas DOS_PUNTOS dato LLAD 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = d;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_modificacion",11, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-4)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fecha_modificacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_modificacion",11, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fecha_modificacion_comillas ::= COMILLA FECHA_MODIFICACION COMILLA 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_modificacion_comillas",12, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fecha_modificacion_comillas ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("fecha_modificacion_comillas",12, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato ::= COMILLA STRING COMILLA 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-1)).value;
		RESULT = s;
              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("dato",13, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.elementAt(CUP$ParserUser$top-2)), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato ::= error 
            {
              Token RESULT =null;

              CUP$ParserUser$result = parser.getSymbolFactory().newSymbol("dato",13, ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUser$stack.peek()), RESULT);
            }
          return CUP$ParserUser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserUser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserUser$do_action(
    int                        CUP$ParserUser$act_num,
    java_cup.runtime.lr_parser CUP$ParserUser$parser,
    java.util.Stack            CUP$ParserUser$stack,
    int                        CUP$ParserUser$top)
    throws java.lang.Exception
    {
              return CUP$ParserUser$do_action_part00000000(
                               CUP$ParserUser$act_num,
                               CUP$ParserUser$parser,
                               CUP$ParserUser$stack,
                               CUP$ParserUser$top);
    }
}

}
