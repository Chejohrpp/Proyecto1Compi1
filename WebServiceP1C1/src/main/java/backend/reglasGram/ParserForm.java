
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.reglasGram;

import backend.objetos.*;
import java_cup.runtime.*;
import backend.reglasGram.symForm.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserForm extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symForm.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserForm() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserForm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserForm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\006\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\011\000\002\005\020\000\002\006\007\000" +
    "\002\006\003\000\002\007\007\000\002\007\003\000\002" +
    "\010\007\000\002\010\003\000\002\011\007\000\002\011" +
    "\003\000\002\012\007\000\002\012\003\000\002\013\007" +
    "\000\002\013\003\000\002\014\010\000\002\014\003\000" +
    "\002\015\004\000\002\015\003\000\002\016\004\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\027\000\002\021\007\000\002\021\003\000\002\022\007" +
    "\000\002\022\003\000\002\023\007\000\002\023\003\000" +
    "\002\024\007\000\002\024\003\000\002\025\007\000\002" +
    "\025\003\000\002\026\007\000\002\026\003\000\002\027" +
    "\007\000\002\027\003\000\002\030\007\000\002\030\003" +
    "\000\002\031\007\000\002\031\003\000\002\032\007\000" +
    "\002\032\003\000\002\033\007\000\002\033\003\000\002" +
    "\034\006\000\002\034\003\000\002\035\004\000\002\035" +
    "\003\000\002\035\003\000\002\036\004\000\002\036\003" +
    "\000\002\037\005\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\041\007\000\002\041\003\000\002" +
    "\042\004\000\002\042\003\000\002\043\007\000\002\043" +
    "\003\000\002\044\005\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\006\003\012\014" +
    "\013\001\002\000\006\006\ufffd\014\ufffd\001\002\000\006" +
    "\006\ufffc\014\ufffc\001\002\000\004\007\017\001\002\000" +
    "\006\006\016\014\013\001\002\000\006\006\ufffe\014\ufffe" +
    "\001\002\000\004\002\001\001\002\000\004\014\020\001" +
    "\002\000\004\010\021\001\002\000\004\011\022\001\002" +
    "\000\006\003\023\014\025\001\002\000\004\013\ufff8\001" +
    "\002\000\004\013\040\001\002\000\004\015\030\001\002" +
    "\000\004\012\027\001\002\000\006\006\ufffb\014\ufffb\001" +
    "\002\000\004\014\031\001\002\000\004\010\032\001\002" +
    "\000\006\003\033\014\035\001\002\000\012\003\uffbc\013" +
    "\uffbc\014\uffbc\025\uffbc\001\002\000\004\013\ufff9\001\002" +
    "\000\004\043\036\001\002\000\004\014\037\001\002\000" +
    "\012\003\uffbd\013\uffbd\014\uffbd\025\uffbd\001\002\000\006" +
    "\003\042\014\043\001\002\000\004\013\050\001\002\000" +
    "\004\013\ufff6\001\002\000\004\016\044\001\002\000\004" +
    "\014\045\001\002\000\004\010\046\001\002\000\006\003" +
    "\033\014\035\001\002\000\004\013\ufff7\001\002\000\006" +
    "\003\051\014\052\001\002\000\004\013\ufff4\001\002\000" +
    "\004\017\316\001\002\000\004\013\054\001\002\000\006" +
    "\003\055\014\056\001\002\000\004\013\ufff2\001\002\000" +
    "\004\020\312\001\002\000\004\013\060\001\002\000\006" +
    "\003\061\014\063\001\002\000\004\013\ufff0\001\002\000" +
    "\004\013\070\001\002\000\004\021\064\001\002\000\004" +
    "\014\065\001\002\000\004\010\066\001\002\000\006\003" +
    "\033\014\035\001\002\000\004\013\ufff1\001\002\000\006" +
    "\003\072\014\073\001\002\000\004\013\100\001\002\000" +
    "\004\013\uffee\001\002\000\004\022\074\001\002\000\004" +
    "\014\075\001\002\000\004\010\076\001\002\000\006\003" +
    "\033\014\035\001\002\000\004\013\uffef\001\002\000\006" +
    "\003\101\014\102\001\002\000\006\003\uffec\041\uffec\001" +
    "\002\000\004\023\145\001\002\000\006\003\104\041\106" +
    "\001\002\000\004\012\uffcd\001\002\000\004\012\ufffa\001" +
    "\002\000\004\010\107\001\002\000\004\005\110\001\002" +
    "\000\010\003\113\006\114\024\115\001\002\000\010\003" +
    "\uffc8\006\uffc8\024\uffc8\001\002\000\004\012\uffce\001\002" +
    "\000\012\003\uffc6\006\uffc6\012\uffca\024\uffc6\001\002\000" +
    "\004\012\uffcb\001\002\000\006\003\123\014\124\001\002" +
    "\000\010\003\120\006\121\024\115\001\002\000\010\003" +
    "\uffc9\006\uffc9\024\uffc9\001\002\000\010\003\uffc6\006\uffc6" +
    "\024\uffc6\001\002\000\004\012\uffcc\001\002\000\004\013" +
    "\133\001\002\000\006\013\uffc2\025\uffc4\001\002\000\004" +
    "\027\127\001\002\000\004\025\126\001\002\000\010\003" +
    "\uffc7\006\uffc7\024\uffc7\001\002\000\004\014\130\001\002" +
    "\000\004\010\131\001\002\000\006\003\033\014\035\001" +
    "\002\000\004\013\uffc3\001\002\000\006\003\134\014\136" +
    "\001\002\000\010\003\uffbe\014\uffbe\025\uffbe\001\002\000" +
    "\010\003\uffc0\014\uffc0\025\uffc0\001\002\000\004\042\141" +
    "\001\002\000\010\003\134\014\136\025\uffc5\001\002\000" +
    "\010\003\uffc1\014\uffc1\025\uffc1\001\002\000\004\014\142" +
    "\001\002\000\004\010\143\001\002\000\006\003\033\014" +
    "\035\001\002\000\010\003\uffbf\014\uffbf\025\uffbf\001\002" +
    "\000\004\014\146\001\002\000\004\010\147\001\002\000" +
    "\004\005\150\001\002\000\010\003\152\006\153\024\155" +
    "\001\002\000\010\003\152\006\310\024\155\001\002\000" +
    "\010\003\uffe6\006\uffe6\024\uffe6\001\002\000\006\003\uffea" +
    "\041\uffea\001\002\000\006\003\uffed\041\uffed\001\002\000" +
    "\006\003\161\014\162\001\002\000\010\003\uffe8\006\uffe8" +
    "\024\uffe8\001\002\000\004\013\170\001\002\000\004\025" +
    "\167\001\002\000\004\013\uffe3\001\002\000\004\026\163" +
    "\001\002\000\004\014\164\001\002\000\004\010\165\001" +
    "\002\000\006\003\033\014\035\001\002\000\004\013\uffe4" +
    "\001\002\000\010\003\uffe7\006\uffe7\024\uffe7\001\002\000" +
    "\006\003\171\014\172\001\002\000\004\013\uffe1\001\002" +
    "\000\004\027\304\001\002\000\004\013\174\001\002\000" +
    "\006\003\175\014\176\001\002\000\004\013\uffdf\001\002" +
    "\000\004\030\300\001\002\000\004\013\200\001\002\000" +
    "\006\003\201\014\202\001\002\000\004\013\uffdd\001\002" +
    "\000\004\031\274\001\002\000\004\013\204\001\002\000" +
    "\006\003\205\014\206\001\002\000\004\013\uffdb\001\002" +
    "\000\004\032\270\001\002\000\004\013\210\001\002\000" +
    "\006\003\211\014\212\001\002\000\004\013\uffd9\001\002" +
    "\000\004\033\264\001\002\000\004\013\214\001\002\000" +
    "\006\003\215\014\216\001\002\000\004\013\uffd7\001\002" +
    "\000\004\034\260\001\002\000\004\013\220\001\002\000" +
    "\006\003\221\014\222\001\002\000\004\013\uffd5\001\002" +
    "\000\004\035\254\001\002\000\004\013\224\001\002\000" +
    "\006\003\225\014\226\001\002\000\004\013\uffd3\001\002" +
    "\000\004\036\250\001\002\000\004\013\230\001\002\000" +
    "\006\003\231\014\232\001\002\000\004\013\uffd1\001\002" +
    "\000\004\037\244\001\002\000\004\013\234\001\002\000" +
    "\006\003\236\014\237\001\002\000\004\025\uffe5\001\002" +
    "\000\004\025\uffcf\001\002\000\004\040\240\001\002\000" +
    "\004\014\241\001\002\000\004\010\242\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\025\uffd0\001\002\000" +
    "\004\014\245\001\002\000\004\010\246\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffd2\001\002\000" +
    "\004\014\251\001\002\000\004\010\252\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffd4\001\002\000" +
    "\004\014\255\001\002\000\004\010\256\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffd6\001\002\000" +
    "\004\014\261\001\002\000\004\010\262\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffd8\001\002\000" +
    "\004\014\265\001\002\000\004\010\266\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffda\001\002\000" +
    "\004\014\271\001\002\000\004\010\272\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffdc\001\002\000" +
    "\004\014\275\001\002\000\004\010\276\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffde\001\002\000" +
    "\004\014\301\001\002\000\004\010\302\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffe0\001\002\000" +
    "\004\014\305\001\002\000\004\010\306\001\002\000\006" +
    "\003\033\014\035\001\002\000\004\013\uffe2\001\002\000" +
    "\006\003\uffeb\041\uffeb\001\002\000\010\003\uffe9\006\uffe9" +
    "\024\uffe9\001\002\000\004\014\313\001\002\000\004\010" +
    "\314\001\002\000\006\003\033\014\035\001\002\000\004" +
    "\013\ufff3\001\002\000\004\014\317\001\002\000\004\010" +
    "\320\001\002\000\006\003\033\014\035\001\002\000\004" +
    "\013\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\013\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\046\001\001\000\002\001\001\000" +
    "\004\010\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\066" +
    "\001\001\000\002\001\001\000\004\013\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\076\001\001\000" +
    "\002\001\001\000\004\014\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\111\036\115\037\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\124\041\121\001\001\000\004\037\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\131\001\001\000\002\001\001\000" +
    "\006\042\136\043\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\153\016\150" +
    "\017\155\001\001\000\004\017\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\157" +
    "\021\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\320\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserForm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserForm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserForm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Formulario> listaFormularios;
	private List<String> listaErrores;
	private List<Componente> listaComponentes;
	private List<DatoRegistros> listaDatos;
	private List<String> listaRegistros;

	public ParserForm(LexerForm lex){
		super(lex);
		listaFormularios = new ArrayList<Formulario>();
		listaErrores = new ArrayList<String>();
		listaComponentes = new ArrayList<>();
		listaDatos = new ArrayList<>();
		listaRegistros = new ArrayList<>();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" }" ;
			listaErrores.add(msgError);
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(Elerror);	
	}

	public List getListaFormularios(){
		return listaFormularios;
	}
	public List getListaErrores(){
		return listaErrores;
	}
	private void llenarLista(Token i, Token t, Token n, Token te,Token uc,Token fc){
		String id = i.getLexema();
		String titulo = t.getLexema();
		String nombre = n.getLexema();
		String tema = te.getLexema();
		String userCreacion = uc.getLexema();
		String fechaCreacion = fc.getLexema();
		Formulario form =  new Formulario(id,titulo,nombre,tema,userCreacion,fechaCreacion);
		form.setListaComponentes(listaComponentes);
		form.setListaDatos(listaDatos);
		listaFormularios.add(form);
	}
	private void addComponent(Token ic,Token nc,Token c,Token i,Token tv,Token a,Token r,Token op,Token f,Token col1,Token u){
		String id = ic.getLexema();
		String nombreCampo = nc.getLexema();
		String clase = c.getLexema();
		String indice = i.getLexema();
		String textoVisible = tv.getLexema();
		String alineacion = a.getLexema();
		String re = r.getLexema();
		String ops = op.getLexema();
		String fil = f.getLexema();
		String col = col1.getLexema();
		String url = u.getLexema();
		Componente comp = new Componente(id,nombreCampo,clase,indice,textoVisible,alineacion,re,ops,fil,col,url);
		listaComponentes.add(comp);
	}
	private void addDatos(Token ncr){
		String nombreCampo = ncr.getLexema();
		DatoRegistros datos = new DatoRegistros(nombreCampo);
		datos.setListaRegistros(listaRegistros);
		listaDatos.add(datos);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserForm$actions {
  private final ParserForm parser;

  /** Constructor */
  CUP$ParserForm$actions(ParserForm parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserForm$do_action_part00000000(
    int                        CUP$ParserForm$act_num,
    java_cup.runtime.lr_parser CUP$ParserForm$parser,
    java.util.Stack            CUP$ParserForm$stack,
    int                        CUP$ParserForm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserForm$result;

      /* select the action based on the action number */
      switch (CUP$ParserForm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DB_FORMULARIOS PAI formularios PAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-3)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).value;
		RESULT = start_val;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserForm$parser.done_parsing();
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formularios ::= formularios formulario 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("formularios",1, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formularios ::= formulario 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("formularios",1, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formularios ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("formularios",1, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formulario ::= COMILLA FORMULARIO COMILLA DOS_PUNTOS CORI contenido_formulario CORD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("formulario",2, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-6)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido_formulario ::= id_form COMA titulo COMA nombre COMA tema COMA user_creacion COMA fecha_creacion COMA estructura datos_recopilados 
            {
              Token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-13)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-13)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-11)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-9)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-9)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-7)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-7)).right;
		Token te = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-7)).value;
		int ucleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-5)).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-5)).right;
		Token uc = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-5)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-3)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-3)).right;
		Token fc = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-3)).value;
		llenarLista(i,t,n,te,uc,fc);
																		listaComponentes = new ArrayList<>();
																		listaDatos = new ArrayList<>();  
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("contenido_formulario",3, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-13)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id_form ::= COMILLA ID_FORM COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("id_form",4, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_form ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("id_form",4, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // titulo ::= COMILLA TITULO COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("titulo",5, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // titulo ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("titulo",5, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nombre ::= COMILLA NOMBRE COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre",6, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nombre ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre",6, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tema ::= COMILLA TEMA COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("tema",7, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tema ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("tema",7, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // user_creacion ::= COMILLA USER_CREACION COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("user_creacion",8, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // user_creacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("user_creacion",8, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fecha_creacion ::= COMILLA FECHA_CREACION COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fecha_creacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura ::= COMILLA ESTRUCTURA COMILLA DOS_PUNTOS PAI sig_estructura 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("estructura",10, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-5)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("estructura",10, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sig_estructura ::= componentes PAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("sig_estructura",11, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sig_estructura ::= PAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("sig_estructura",11, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // componentes ::= componentes componente 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("componentes",12, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // componentes ::= componente 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("componentes",12, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // componente ::= LLAI valores_componente LLAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("componente",13, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("componente",13, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores_componente ::= id_comp COMA nombre_campo COMA clase COMA indice COMA texto_visible COMA alienacion COMA requerido COMA opciones COMA filas COMA columnas COMA url 
            {
              Token RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-20)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-20)).right;
		Token ic = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-20)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-18)).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-18)).right;
		Token nc = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-18)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-16)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-16)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-16)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-14)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-14)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-14)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-12)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-12)).right;
		Token tv = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-10)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-10)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-8)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-8)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-6)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).right;
		Token col = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		addComponent(ic,nc,c,i,tv,a,r,op,f,col,u);
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("valores_componente",14, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-20)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_comp ::= COMILLA ID_COMP COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("id_comp",15, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id_comp ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("id_comp",15, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nombre_campo ::= COMILLA NOMBRE_CAMPO COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre_campo",16, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nombre_campo ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre_campo",16, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // clase ::= COMILLA CLASE COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // clase ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // indice ::= COMILLA INDICE COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("indice",18, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // indice ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("indice",18, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // texto_visible ::= COMILLA TEXTO_VISIBLE COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("texto_visible",19, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // texto_visible ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("texto_visible",19, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alienacion ::= COMILLA ALINEACION COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("alienacion",20, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alienacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("alienacion",20, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // requerido ::= COMILLA REQUERIDO COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("requerido",21, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // requerido ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("requerido",21, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opciones ::= COMILLA OPCIONES COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("opciones",22, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opciones ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("opciones",22, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // filas ::= COMILLA FILAS COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("filas",23, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // filas ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("filas",23, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // columnas ::= COMILLA COLUMNAS COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("columnas",24, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // columnas ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("columnas",24, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // url ::= COMILLA URL COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("url",25, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // url ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("url",25, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_recopilados ::= DATOS_RECOPILADOS DOS_PUNTOS PAI sig_datos_recopilados 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("datos_recopilados",26, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-3)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // datos_recopilados ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("datos_recopilados",26, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sig_datos_recopilados ::= registros PAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("sig_datos_recopilados",27, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sig_datos_recopilados ::= PAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("sig_datos_recopilados",27, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sig_datos_recopilados ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("sig_datos_recopilados",27, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // registros ::= registros registro 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("registros",28, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // registros ::= registro 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("registros",28, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // registro ::= LLAI bloque_registro LLAD 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("registro",29, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // registro ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("registro",29, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_registro ::= nombre_campo_registro COMA cont_registros 
            {
              Token RESULT =null;
		int ncrleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).left;
		int ncrright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).right;
		Token ncr = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)).value;
		addDatos(ncr); listaRegistros = new ArrayList<>(); 
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("bloque_registro",30, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_registro ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("bloque_registro",30, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nombre_campo_registro ::= COMILLA NOMBRE_CAMPO COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		RESULT = d;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre_campo_registro",31, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // nombre_campo_registro ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("nombre_campo_registro",31, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cont_registros ::= cont_registros cont_registro 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("cont_registros",32, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cont_registros ::= cont_registro 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("cont_registros",32, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cont_registro ::= COMILLA REGISTRO COMILLA DOS_PUNTOS dato 
            {
              Token RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.peek()).value;
		listaRegistros.add(d.getLexema());
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("cont_registro",33, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-4)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cont_registro ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("cont_registro",33, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dato ::= COMILLA STRING COMILLA 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-1)).value;
		RESULT = s;
              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("dato",34, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.elementAt(CUP$ParserForm$top-2)), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dato ::= error 
            {
              Token RESULT =null;

              CUP$ParserForm$result = parser.getSymbolFactory().newSymbol("dato",34, ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserForm$stack.peek()), RESULT);
            }
          return CUP$ParserForm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserForm$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserForm$do_action(
    int                        CUP$ParserForm$act_num,
    java_cup.runtime.lr_parser CUP$ParserForm$parser,
    java.util.Stack            CUP$ParserForm$stack,
    int                        CUP$ParserForm$top)
    throws java.lang.Exception
    {
              return CUP$ParserForm$do_action_part00000000(
                               CUP$ParserForm$act_num,
                               CUP$ParserForm$parser,
                               CUP$ParserForm$stack,
                               CUP$ParserForm$top);
    }
}

}
