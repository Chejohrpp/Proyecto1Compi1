
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.reglasGram;

import backend.objetos.*;
import java_cup.runtime.*;
import backend.reglasGram.symServidor.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserServidor extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symServidor.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserServidor() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserServidor(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserServidor(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\005\006\000\002\005\003\000\002\006\010\000\002" +
    "\007\007\000\002\007\007\000\002\007\004\000\002\010" +
    "\006\000\002\010\003\000\002\011\007\000\002\011\005" +
    "\000\002\012\007\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\020\005\000\002\021\005\000" +
    "\002\022\005\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\024" +
    "\005\000\002\025\005\000\002\026\005\000\002\027\005" +
    "\000\002\030\005\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\003\004\004\005\001\002\000\010\003" +
    "\012\006\011\007\013\001\002\000\004\005\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\010\003\012\006\011\007\013\001\002\000\004\010\143" +
    "\001\002\000\004\002\ufffc\001\002\000\004\012\015\001" +
    "\002\000\004\002\001\001\002\000\004\017\016\001\002" +
    "\000\010\003\020\014\017\015\021\001\002\000\004\017" +
    "\102\001\002\000\006\003\073\004\074\001\002\000\004" +
    "\017\023\001\002\000\004\002\ufffd\001\002\000\004\010" +
    "\024\001\002\000\006\003\026\023\027\001\002\000\006" +
    "\003\073\004\074\001\002\000\006\003\040\025\036\001" +
    "\002\000\006\003\030\017\032\001\002\000\004\012\uffeb" +
    "\001\002\000\004\012\035\001\002\000\004\016\033\001" +
    "\002\000\004\017\034\001\002\000\004\012\uffec\001\002" +
    "\000\006\003\040\025\036\001\002\000\006\003\042\023" +
    "\043\001\002\000\004\024\041\001\002\000\004\024\uffe7" +
    "\001\002\000\006\003\uffee\004\uffee\001\002\000\006\026" +
    "\uffe1\027\uffe1\001\002\000\006\003\052\017\055\001\002" +
    "\000\006\026\047\027\046\001\002\000\006\026\uffe2\027" +
    "\uffe2\001\002\000\004\023\043\001\002\000\004\024\uffe8" +
    "\001\002\000\006\026\uffe3\027\uffe3\001\002\000\006\024" +
    "\067\027\066\001\002\000\006\024\uffd9\027\uffd9\001\002" +
    "\000\006\024\uffda\027\uffda\001\002\000\004\012\060\001" +
    "\002\000\004\021\056\001\002\000\004\017\057\001\002" +
    "\000\004\012\uffd5\001\002\000\006\003\061\017\063\001" +
    "\002\000\006\024\uffd3\027\uffd3\001\002\000\006\024\uffd7" +
    "\027\uffd7\001\002\000\004\022\064\001\002\000\004\017" +
    "\065\001\002\000\006\024\uffd4\027\uffd4\001\002\000\004" +
    "\017\055\001\002\000\006\026\uffdf\027\uffdf\001\002\000" +
    "\006\024\uffdb\027\uffdb\001\002\000\004\024\072\001\002" +
    "\000\006\003\uffed\004\uffed\001\002\000\010\002\ufff1\003" +
    "\ufff1\004\ufff1\001\002\000\004\005\076\001\002\000\010" +
    "\002\ufff4\003\ufff4\004\ufff4\001\002\000\004\013\077\001" +
    "\002\000\004\010\100\001\002\000\010\002\ufff2\003\ufff2" +
    "\004\ufff2\001\002\000\010\002\ufff3\003\ufff3\004\ufff3\001" +
    "\002\000\004\010\103\001\002\000\006\003\105\023\106" +
    "\001\002\000\006\003\073\004\074\001\002\000\006\003" +
    "\112\025\111\001\002\000\006\003\030\017\032\001\002" +
    "\000\004\012\110\001\002\000\006\003\112\025\111\001" +
    "\002\000\006\003\115\023\117\001\002\000\004\024\uffe9" +
    "\001\002\000\004\024\114\001\002\000\006\003\ufff0\004" +
    "\ufff0\001\002\000\006\026\uffe4\027\uffe4\001\002\000\006" +
    "\026\uffe5\027\uffe5\001\002\000\006\003\125\017\130\001" +
    "\002\000\006\026\122\027\121\001\002\000\004\023\117" +
    "\001\002\000\004\024\uffea\001\002\000\006\026\uffe6\027" +
    "\uffe6\001\002\000\006\024\136\027\135\001\002\000\006" +
    "\024\uffdc\027\uffdc\001\002\000\006\024\uffdd\027\uffdd\001" +
    "\002\000\004\012\133\001\002\000\004\020\131\001\002" +
    "\000\004\017\132\001\002\000\004\012\uffd6\001\002\000" +
    "\006\003\061\017\063\001\002\000\006\024\uffd8\027\uffd8" +
    "\001\002\000\004\017\130\001\002\000\006\026\uffe0\027" +
    "\uffe0\001\002\000\006\024\uffde\027\uffde\001\002\000\004" +
    "\024\141\001\002\000\006\003\uffef\004\uffef\001\002\000" +
    "\010\002\ufff5\003\ufff5\004\ufff5\001\002\000\006\003\144" +
    "\004\145\001\002\000\010\003\020\014\017\015\021\001" +
    "\002\000\004\005\163\001\002\000\006\003\151\004\152" +
    "\001\002\000\006\003\ufffa\004\ufffa\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\ufff7\001\002\000\004\005\154" +
    "\001\002\000\006\003\ufffb\004\ufffb\001\002\000\006\007" +
    "\156\011\155\001\002\000\004\010\162\001\002\000\004" +
    "\012\157\001\002\000\004\017\160\001\002\000\010\003" +
    "\020\014\017\015\021\001\002\000\006\003\ufff6\004\ufff6" +
    "\001\002\000\004\002\ufff8\001\002\000\004\007\156\001" +
    "\002\000\006\003\ufff9\004\ufff9\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\005\001\001\000\004\003\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\021\001\001\000\002\001\001\000\004\010" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\024\001\001\000\004\010\074\001" +
    "\001\000\004\015\070\001\001\000\004\013\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\036\001\001" +
    "\000\006\017\043\021\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\050\025\052\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\067\027\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\103\001\001\000\004\010\141\001\001\000\004\014\137" +
    "\001\001\000\004\013\106\001\001\000\002\001\001\000" +
    "\004\014\112\001\001\000\006\016\117\020\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\123\024\125" +
    "\026\126\001\001\000\002\001\001\000\004\020\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\133\001\001\000\002\001\001\000\006\024\136\026" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\145\006\146\001\001\000\004\007\163\001\001\000\002" +
    "\001\001\000\006\005\147\006\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserServidor$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserServidor$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserServidor$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Parametro> listaParametros;
	private List<LosErrores> listaErrores;

	public ParserServidor(LexerServidor lex){
		super(lex);
		listaParametros = new ArrayList<Parametro>();
		listaErrores = new ArrayList<LosErrores>();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" }" ;
			listaErrores.add(new LosErrores(msgError));
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(new LosErrores(Elerror));	
	}

	public List getListaParametros(){
		return listaParametros;
	}
	public List getListaErrores(){
		return listaErrores;
	}

	protected int error_sync_size(){
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserServidor$actions {
  private final ParserServidor parser;

  /** Constructor */
  CUP$ParserServidor$actions(ParserServidor parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserServidor$do_action_part00000000(
    int                        CUP$ParserServidor$act_num,
    java_cup.runtime.lr_parser CUP$ParserServidor$parser,
    java.util.Stack            CUP$ParserServidor$stack,
    int                        CUP$ParserServidor$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserServidor$result;

      /* select the action based on the action number */
      switch (CUP$ParserServidor$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= MENQ ADMIRACION sig_inicio 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).value;
		RESULT = start_val;
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserServidor$parser.done_parsing();
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error sig_inicio 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sig_inicio ::= INI_RESPUESTAS MAQ solicitudes fin_respuestas 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-3)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sig_inicio ::= INI_RESPUESTA DOS_PUNTOS COMILLAS sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-3)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sig_inicio ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // solicitudes ::= solicitudes solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitudes ::= solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitudes ::= error sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fin_respuestas ::= MENQ ADMIRACION FIN_RESPUESTAS MAQ 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("fin_respuestas",3, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-3)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fin_respuestas ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("fin_respuestas",3, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // solicitud ::= MENQ ADMIRACION INI_RESPUESTA DOS_PUNTOS COMILLAS sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("solicitud",4, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-5)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sig_solicitud ::= LOGIN_USUARIO COMILLAS MAQ contenido_usuario fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-4)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sig_solicitud ::= RESPUESTA_SERVIDOR COMILLAS MAQ contenido_respuesta fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-4)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sig_solicitud ::= error fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fin_solicitud ::= MENQ ADMIRACION FIN_RESPUESTA MAQ 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("fin_solicitud",6, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-3)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fin_solicitud ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("fin_solicitud",6, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenido_usuario ::= LLAI bloque DOS_PUNTOS paquetes_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("contenido_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-4)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contenido_usuario ::= error paquetes_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("contenido_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenido_respuesta ::= LLAI bloque DOS_PUNTOS paquetes_respuesta LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("contenido_respuesta",8, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-4)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenido_respuesta ::= error paquetes_respuesta LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("contenido_respuesta",8, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= COMILLAS BLOQUE COMILLAS 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paquetes_usuario ::= CORI bloques_usuario CORD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("paquetes_usuario",10, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paquetes_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("paquetes_usuario",10, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paquetes_respuesta ::= CORI bloques_respuesta CORD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("paquetes_respuesta",11, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paquetes_respuesta ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("paquetes_respuesta",11, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloques_usuario ::= bloques_usuario COMA bloque_usuario 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_usuario",12, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloques_usuario ::= bloque_usuario 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_usuario",12, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloques_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_usuario",12, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloques_respuesta ::= bloques_respuesta COMA bloque_respuesta 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_respuesta",13, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloques_respuesta ::= bloque_respuesta 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_respuesta",13, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloques_respuesta ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloques_respuesta",13, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloque_usuario ::= LLAI parametros_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloque_usuario",14, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloque_respuesta ::= LLAI parametros_respuesta LLAD 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("bloque_respuesta",15, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_usuario ::= parametros_usuario COMA parametro_usuario 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_usuario",16, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_usuario ::= parametro_usuario 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_usuario",16, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_usuario",16, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_respuesta ::= parametros_respuesta COMA parametro_respuesta 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_respuesta",17, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_respuesta ::= parametro_respuesta 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_respuesta",17, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_respuesta ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametros_respuesta",17, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro_usuario ::= usuario DOS_PUNTOS datos 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametro_usuario",18, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro_respuesta ::= respuesta DOS_PUNTOS datos 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("parametro_respuesta",19, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // usuario ::= COMILLAS USUARIO COMILLAS 
            {
              Token RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).value;
		RESULT = u; 
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("usuario",20, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // respuesta ::= COMILLAS RESPUESTA COMILLAS 
            {
              Token RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).value;
		RESULT = u; 
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("respuesta",21, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // datos ::= COMILLAS STRING COMILLAS 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-1)).value;
		RESULT = s; 
              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("datos",22, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.elementAt(CUP$ParserServidor$top-2)), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datos ::= error 
            {
              Token RESULT =null;

              CUP$ParserServidor$result = parser.getSymbolFactory().newSymbol("datos",22, ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserServidor$stack.peek()), RESULT);
            }
          return CUP$ParserServidor$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserServidor$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserServidor$do_action(
    int                        CUP$ParserServidor$act_num,
    java_cup.runtime.lr_parser CUP$ParserServidor$parser,
    java.util.Stack            CUP$ParserServidor$stack,
    int                        CUP$ParserServidor$top)
    throws java.lang.Exception
    {
              return CUP$ParserServidor$do_action_part00000000(
                               CUP$ParserServidor$act_num,
                               CUP$ParserServidor$parser,
                               CUP$ParserServidor$stack,
                               CUP$ParserServidor$top);
    }
}

}
