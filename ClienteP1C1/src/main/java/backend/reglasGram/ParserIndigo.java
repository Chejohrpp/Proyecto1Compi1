
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.reglasGram;

import backend.objetos.*;
import java_cup.runtime.*;
import backend.reglasGram.symIndigo.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserIndigo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symIndigo.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserIndigo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserIndigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserIndigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\003\006\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\005\006\000\002\005\003\000\002\006\010\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\004\000\002\010\006\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\007\000\002\014\005\000\002\015\007" +
    "\000\002\015\003\000\002\016\007\000\002\016\003\000" +
    "\002\017\011\000\002\017\003\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\033\005\000\002" +
    "\034\005\000\002\035\005\000\002\036\005\000\002\037" +
    "\005\000\002\037\003\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\042\003\000\002\043\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\047\005\000\002\050" +
    "\005\000\002\051\005\000\002\052\005\000\002\052\003" +
    "\000\002\053\005\000\002\054\005\000\002\055\005\000" +
    "\002\056\005\000\002\056\003\000\002\057\005\000\002" +
    "\060\005\000\002\061\005\000\002\062\005\000\002\062" +
    "\003\000\002\063\005\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\006\003\004\004\005\001\002\000\010\003" +
    "\012\006\011\011\013\001\002\000\004\005\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\010\003\012\006\011\011\013\001\002\000\004\007\343" +
    "\001\002\000\004\002\ufffc\001\002\000\004\012\015\001" +
    "\002\000\004\002\001\001\002\000\004\032\016\001\002" +
    "\000\032\003\033\013\025\015\030\016\020\017\017\020" +
    "\034\021\022\022\024\023\026\024\031\025\021\026\027" +
    "\001\002\000\004\032\uffec\001\002\000\004\032\uffed\001" +
    "\002\000\004\032\uffe6\001\002\000\004\032\uffea\001\002" +
    "\000\004\032\301\001\002\000\004\032\uffe9\001\002\000" +
    "\004\032\233\001\002\000\004\032\uffe8\001\002\000\004" +
    "\032\uffe5\001\002\000\004\032\uffee\001\002\000\004\032" +
    "\uffe7\001\002\000\004\032\134\001\002\000\006\003\125" +
    "\004\126\001\002\000\004\032\uffeb\001\002\000\004\032" +
    "\037\001\002\000\004\002\ufffd\001\002\000\004\007\040" +
    "\001\002\000\006\003\041\035\043\001\002\000\006\003" +
    "\uffe1\004\uffe1\001\002\000\006\003\125\004\126\001\002" +
    "\000\006\003\045\032\046\001\002\000\004\012\051\001" +
    "\002\000\004\012\uffd9\001\002\000\004\030\047\001\002" +
    "\000\004\032\050\001\002\000\004\012\uffda\001\002\000" +
    "\006\003\053\037\052\001\002\000\006\003\057\035\061" +
    "\001\002\000\004\036\uffd3\001\002\000\004\036\055\001" +
    "\002\000\006\003\uffe2\004\uffe2\001\002\000\006\040\uffca" +
    "\041\uffca\001\002\000\006\040\uffc9\041\uffc9\001\002\000" +
    "\006\040\123\041\122\001\002\000\006\003\064\032\071" +
    "\001\002\000\010\012\uffa7\036\uffa7\041\uffa7\001\002\000" +
    "\004\012\114\001\002\000\010\012\uffa6\036\uffb9\041\uffb9" +
    "\001\002\000\004\012\111\001\002\000\004\012\106\001" +
    "\002\000\006\036\103\041\102\001\002\000\006\036\uffba" +
    "\041\uffba\001\002\000\012\033\074\042\072\043\075\045" +
    "\073\001\002\000\004\032\101\001\002\000\004\032\100" +
    "\001\002\000\004\032\077\001\002\000\004\032\076\001" +
    "\002\000\010\012\uffa4\036\uffa4\041\uffa4\001\002\000\010" +
    "\012\uffa8\036\uffa8\041\uffa8\001\002\000\004\012\uffa3\001" +
    "\002\000\004\012\uffa5\001\002\000\006\003\104\032\071" +
    "\001\002\000\006\040\uffc1\041\uffc1\001\002\000\010\012" +
    "\uffa6\036\uffa6\041\uffa6\001\002\000\006\036\uffbb\041\uffbb" +
    "\001\002\000\006\003\104\032\110\001\002\000\006\036" +
    "\uffb1\041\uffb1\001\002\000\006\033\074\043\075\001\002" +
    "\000\004\032\113\001\002\000\006\036\uffb0\041\uffb0\001" +
    "\002\000\004\043\075\001\002\000\006\003\104\032\117" +
    "\001\002\000\006\036\uffa1\041\uffa1\001\002\000\006\036" +
    "\uffaf\041\uffaf\001\002\000\010\033\074\043\075\044\120" +
    "\001\002\000\004\032\121\001\002\000\006\036\uffa2\041" +
    "\uffa2\001\002\000\004\035\061\001\002\000\004\036\uffd4" +
    "\001\002\000\006\040\uffcb\041\uffcb\001\002\000\010\002" +
    "\uffef\003\uffef\004\uffef\001\002\000\004\014\130\001\002" +
    "\000\010\002\ufff4\003\ufff4\004\ufff4\001\002\000\004\005" +
    "\131\001\002\000\004\007\132\001\002\000\010\002\ufff0" +
    "\003\ufff0\004\ufff0\001\002\000\010\002\ufff1\003\ufff1\004" +
    "\ufff1\001\002\000\004\007\135\001\002\000\006\003\136" +
    "\035\140\001\002\000\006\003\uffdf\004\uffdf\001\002\000" +
    "\006\003\125\004\126\001\002\000\006\003\141\032\143" +
    "\001\002\000\004\012\uffd7\001\002\000\004\012\146\001" +
    "\002\000\004\031\144\001\002\000\004\032\145\001\002" +
    "\000\004\012\uffd8\001\002\000\006\003\150\037\147\001" +
    "\002\000\006\003\154\035\155\001\002\000\004\036\uffd1" +
    "\001\002\000\004\036\152\001\002\000\006\003\uffe0\004" +
    "\uffe0\001\002\000\006\040\230\041\227\001\002\000\006" +
    "\040\uffc6\041\uffc6\001\002\000\006\003\167\032\165\001" +
    "\002\000\006\040\uffc7\041\uffc7\001\002\000\004\012\225" +
    "\001\002\000\004\012\220\001\002\000\004\012\216\001" +
    "\002\000\004\012\214\001\002\000\006\036\uffb7\041\uffb7" +
    "\001\002\000\004\012\212\001\002\000\020\033\074\042" +
    "\072\043\075\046\204\047\203\050\205\052\202\001\002" +
    "\000\006\036\200\041\177\001\002\000\010\012\uffa6\036" +
    "\uffb6\041\uffb6\001\002\000\004\012\171\001\002\000\006" +
    "\003\104\032\174\001\002\000\006\036\uffaa\041\uffaa\001" +
    "\002\000\006\036\uff9c\041\uff9c\001\002\000\012\033\074" +
    "\043\075\044\120\051\175\001\002\000\004\032\176\001" +
    "\002\000\006\036\uff9d\041\uff9d\001\002\000\006\003\104" +
    "\032\165\001\002\000\006\040\uffc0\041\uffc0\001\002\000" +
    "\006\036\uffb8\041\uffb8\001\002\000\004\032\211\001\002" +
    "\000\004\032\210\001\002\000\004\032\207\001\002\000" +
    "\004\032\206\001\002\000\004\012\uff9e\001\002\000\004" +
    "\012\uffa0\001\002\000\004\012\uff9f\001\002\000\004\012" +
    "\uff9b\001\002\000\006\003\104\032\110\001\002\000\006" +
    "\036\uffae\041\uffae\001\002\000\004\032\113\001\002\000" +
    "\006\036\uffac\041\uffac\001\002\000\006\003\104\032\117" +
    "\001\002\000\006\036\uffab\041\uffab\001\002\000\004\032" +
    "\221\001\002\000\004\053\223\001\002\000\006\036\uffa9" +
    "\041\uffa9\001\002\000\004\032\224\001\002\000\006\036" +
    "\uff9a\041\uff9a\001\002\000\004\032\113\001\002\000\006" +
    "\036\uffad\041\uffad\001\002\000\004\035\155\001\002\000" +
    "\004\036\uffd2\001\002\000\006\040\uffc8\041\uffc8\001\002" +
    "\000\010\002\ufff3\003\ufff3\004\ufff3\001\002\000\004\007" +
    "\234\001\002\000\006\003\235\035\237\001\002\000\006" +
    "\003\uffdd\004\uffdd\001\002\000\006\003\125\004\126\001" +
    "\002\000\004\032\240\001\002\000\004\034\241\001\002" +
    "\000\004\032\242\001\002\000\004\012\243\001\002\000" +
    "\006\003\245\037\244\001\002\000\006\003\250\035\252" +
    "\001\002\000\004\036\uffcf\001\002\000\004\036\247\001" +
    "\002\000\006\003\uffde\004\uffde\001\002\000\006\040\uffc3" +
    "\041\uffc3\001\002\000\006\040\uffc4\041\uffc4\001\002\000" +
    "\006\003\257\032\261\001\002\000\006\040\255\041\254" +
    "\001\002\000\004\035\252\001\002\000\004\036\uffd0\001" +
    "\002\000\006\040\uffc5\041\uffc5\001\002\000\010\012\uff97" +
    "\036\uffb3\041\uffb3\001\002\000\006\036\275\041\274\001" +
    "\002\000\004\054\272\001\002\000\006\036\uffb4\041\uffb4" +
    "\001\002\000\004\012\264\001\002\000\006\003\265\032" +
    "\266\001\002\000\006\036\uff95\041\uff95\001\002\000\004" +
    "\055\270\001\002\000\006\036\uff99\041\uff99\001\002\000" +
    "\004\032\271\001\002\000\006\036\uff96\041\uff96\001\002" +
    "\000\004\032\273\001\002\000\004\012\uff98\001\002\000" +
    "\006\003\276\032\261\001\002\000\006\040\uffbf\041\uffbf" +
    "\001\002\000\004\012\uff97\001\002\000\006\036\uffb5\041" +
    "\uffb5\001\002\000\010\002\ufff2\003\ufff2\004\ufff2\001\002" +
    "\000\004\007\302\001\002\000\006\003\304\035\305\001" +
    "\002\000\006\003\125\004\126\001\002\000\006\003\313" +
    "\037\312\001\002\000\006\003\306\032\307\001\002\000" +
    "\004\012\uffdb\001\002\000\004\027\336\001\002\000\004" +
    "\012\311\001\002\000\006\003\313\037\312\001\002\000" +
    "\006\003\316\035\321\001\002\000\004\036\uffd5\001\002" +
    "\000\004\036\315\001\002\000\006\003\uffe4\004\uffe4\001" +
    "\002\000\006\040\uffcc\041\uffcc\001\002\000\006\040\uffcd" +
    "\041\uffcd\001\002\000\006\040\334\041\333\001\002\000" +
    "\006\003\323\032\110\001\002\000\006\036\331\041\330" +
    "\001\002\000\010\012\uffa6\036\uffbc\041\uffbc\001\002\000" +
    "\006\036\uffbd\041\uffbd\001\002\000\004\012\326\001\002" +
    "\000\006\003\104\032\110\001\002\000\006\036\uffb2\041" +
    "\uffb2\001\002\000\006\003\104\032\110\001\002\000\006" +
    "\040\uffc2\041\uffc2\001\002\000\006\036\uffbe\041\uffbe\001" +
    "\002\000\004\035\321\001\002\000\004\036\uffd6\001\002" +
    "\000\006\040\uffce\041\uffce\001\002\000\004\032\337\001" +
    "\002\000\004\012\uffdc\001\002\000\004\036\341\001\002" +
    "\000\006\003\uffe3\004\uffe3\001\002\000\010\002\ufff5\003" +
    "\ufff5\004\ufff5\001\002\000\006\003\344\004\345\001\002" +
    "\000\032\003\033\013\025\015\030\016\020\017\017\020" +
    "\034\021\022\022\024\023\026\024\031\025\021\026\027" +
    "\001\002\000\004\005\363\001\002\000\006\003\350\004" +
    "\352\001\002\000\006\003\ufffa\004\ufffa\001\002\000\004" +
    "\002\ufff7\001\002\000\004\002\ufffe\001\002\000\004\005" +
    "\354\001\002\000\006\003\ufffb\004\ufffb\001\002\000\006" +
    "\010\356\011\355\001\002\000\004\012\360\001\002\000" +
    "\004\007\357\001\002\000\004\002\ufff8\001\002\000\004" +
    "\032\361\001\002\000\032\003\033\013\025\015\030\016" +
    "\020\017\017\020\034\021\022\022\024\023\026\024\031" +
    "\025\021\026\027\001\002\000\006\003\ufff6\004\ufff6\001" +
    "\002\000\004\011\355\001\002\000\006\003\ufff9\004\ufff9" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\002\005\001\001\000\004\003\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\035\011\022\012\034\013\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\041\001\001\000\002\001" +
    "\001\000\004\010\126\001\001\000\004\021\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\053\001\001" +
    "\000\006\030\057\034\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\066\044\067\046" +
    "\065\047\064\050\061\051\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\044\104\046" +
    "\065\047\064\050\061\051\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\106\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\114\050\061\052\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\136\001\001\000\002\001\001\000\004\010\231\001\001" +
    "\000\004\022\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\150\001\001\000\006\031\152\035\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\165\045" +
    "\162\046\163\047\156\050\061\053\161\054\160\055\167" +
    "\057\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\114" +
    "\050\061\052\172\056\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\045\200\046\163\047\156\050\061\053" +
    "\161\054\160\055\167\057\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\212\050\061\001\001\000\002\001\001\000\004\050\214" +
    "\001\001\000\002\001\001\000\010\046\114\050\061\052" +
    "\216\001\001\000\002\001\001\000\004\060\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\225\001\001\000\002\001\001" +
    "\000\004\035\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\235" +
    "\001\001\000\002\001\001\000\004\010\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\245\001\001\000\006\032\252\036" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\257\061\261\062\262\001\001\000\002\001\001\000\004" +
    "\036\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\276\062\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\302\001\001\000\004\010\341" +
    "\001\001\000\004\023\337\001\001\000\004\020\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\313\001\001\000\006\027\317\033\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\037\321\043\323\046\324\050\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\326\050\061\001\001\000\002\001\001" +
    "\000\010\043\331\046\324\050\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\345\006\346\001\001\000\012\007\363\011" +
    "\022\012\034\013\031\001\001\000\002\001\001\000\006" +
    "\005\350\006\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\361\011\022" +
    "\012\034\013\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserIndigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserIndigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserIndigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Parametro> listaParametros;
	private List<LosErrores> listaErrores;

	public ParserIndigo(LexerIndigo lex){
		super(lex);
		listaParametros = new ArrayList<Parametro>();
		listaErrores = new ArrayList<LosErrores>();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" }" ;
			listaErrores.add(new LosErrores(msgError));
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(new LosErrores(Elerror));	
	}

	public List getListaParametros(){
		return listaParametros;
	}
	public List getListaErrores(){
		return listaErrores;
	}
	//metodo sin usar
	private void listaTokens(List expectacions){
		for(Object expectacion : expectacions){
                    String stringToken = expectacion.toString();
                    int simToken = Integer.parseInt(stringToken);
			System.out.println("Lista de Tokens: "+ symbl_name_from_id(simToken) );
		}
	}

	protected int error_sync_size(){
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserIndigo$actions {
  private final ParserIndigo parser;

  /** Constructor */
  CUP$ParserIndigo$actions(ParserIndigo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserIndigo$do_action_part00000000(
    int                        CUP$ParserIndigo$act_num,
    java_cup.runtime.lr_parser CUP$ParserIndigo$parser,
    java.util.Stack            CUP$ParserIndigo$stack,
    int                        CUP$ParserIndigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserIndigo$result;

      /* select the action based on the action number */
      switch (CUP$ParserIndigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= MENQ ADMIRACION sig_inicio 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = start_val;
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserIndigo$parser.done_parsing();
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error sig_inicio 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sig_inicio ::= INI_SOLICITUDES MAQ solicitudes fin_solicitudes 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sig_inicio ::= INI_SOLICITUD DOS_PUNTOS COMILLAS sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sig_inicio ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // solicitudes ::= solicitudes solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitudes ::= solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitudes ::= error sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fin_solicitudes ::= MENQ ADMIRACION FIN_SOLICITUDES MAQ 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("fin_solicitudes",3, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fin_solicitudes ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("fin_solicitudes",3, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // solicitud ::= MENQ ADMIRACION INI_SOLICITUD DOS_PUNTOS COMILLAS sig_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("solicitud",4, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-5)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sig_solicitud ::= nombre_solicitud_usuario COMILLAS MAQ contenido_usuario fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sig_solicitud ::= nombre_solicitud_formulario COMILLAS MAQ contenido_formulario fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sig_solicitud ::= nombre_solicitud_componente COMILLAS MAQ contenido_componente fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sig_solicitud ::= CONSULTAR_DATOS COMILLAS MAQ contenido_consulta fin_solicitud 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sig_solicitud ::= error fin_solicitud 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("sig_solicitud",5, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fin_solicitud ::= MENQ FIN_SOLICITUD ADMIRACION MAQ 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("fin_solicitud",6, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fin_solicitud ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("fin_solicitud",6, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nombre_solicitud_usuario ::= CREAR_USUARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nombre_solicitud_usuario ::= MODIFICAR_USUARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nombre_solicitud_usuario ::= ELIMINAR_USUARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nombre_solicitud_usuario ::= LOGIN_USUARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_usuario",7, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nombre_solicitud_formulario ::= NUEVO_FORMULARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nombre_solicitud_formulario ::= ELIMINAR_FORMULARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nombre_solicitud_formulario ::= MODIFICAR_FORMULARIO 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nombre_solicitud_componente ::= AGREGAR_COMPONENTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_componente",9, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nombre_solicitud_componente ::= ELIMINAR_COMPONENTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_componente",9, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nombre_solicitud_componente ::= MODIFICAR_COMPONENTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(token,null));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("nombre_solicitud_componente",9, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenido_usuario ::= LLAI bloque_parametro_comillas_credenciales_usuario DOS_PUNTOS paquetes_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_usuario",10, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenido_usuario ::= error paquetes_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_usuario",10, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenido_formulario ::= LLAI bloque_parametro_comillas_parametros_formulario DOS_PUNTOS paquetes_formulario LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_formulario",11, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenido_formulario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_formulario",11, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contenido_componente ::= LLAI bloque_parametro_comillas_parametros_componente DOS_PUNTOS paquetes_componente LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_componente",12, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contenido_componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_componente",12, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contenido_consulta ::= LLAI COMILLAS CONSULTAS COMILLAS DOS_PUNTOS paquetes_consulta LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_consulta",13, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenido_consulta ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("contenido_consulta",13, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_parametro_comillas_credenciales_usuario ::= COMILLAS CREDENCIALES_USUARIO COMILLAS 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_credenciales_usuario",14, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque_parametro_comillas_credenciales_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_credenciales_usuario",14, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque_parametro_comillas_parametros_formulario ::= COMILLAS PARAMETROS_FORMULARIO COMILLAS 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_parametros_formulario",15, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque_parametro_comillas_parametros_formulario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_parametros_formulario",15, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloque_parametro_comillas_parametros_componente ::= COMILLAS PARAMETROS_COMPONENTE COMILLAS 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_parametros_componente",16, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloque_parametro_comillas_parametros_componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_parametro_comillas_parametros_componente",16, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paquetes_usuario ::= CORI bloques_usuario CORD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_usuario",17, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paquetes_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_usuario",17, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paquetes_formulario ::= CORI bloques_formulario CORD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_formulario",18, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paquetes_formulario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_formulario",18, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paquetes_componente ::= CORI bloques_componente CORD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_componente",19, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paquetes_componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_componente",19, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paquetes_consulta ::= CORI bloques_consulta CORD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_consulta",20, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paquetes_consulta ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("paquetes_consulta",20, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloques_usuario ::= bloques_usuario COMA bloque_usuario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_usuario",21, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloques_usuario ::= bloque_usuario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_usuario",21, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloques_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_usuario",21, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloques_formulario ::= bloques_formulario COMA bloque_formulario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_formulario",22, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloques_formulario ::= bloque_formulario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_formulario",22, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloques_formulario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_formulario",22, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloques_componente ::= bloques_componente COMA bloque_componente 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_componente",23, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloques_componente ::= bloque_componente 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_componente",23, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloques_componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_componente",23, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloques_consulta ::= bloques_consulta COMA bloque_consulta 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_consulta",24, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloques_consulta ::= bloque_consulta 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_consulta",24, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloques_consulta ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloques_consulta",24, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_usuario ::= LLAI parametros_usuario LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_usuario",25, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_formulario ::= LLAI parametros_formulario LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_formulario",26, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_componente ::= LLAI parametros_componente LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_componente",27, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_consulta ::= LLAI parametros_consulta LLAD 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("bloque_consulta",28, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_usuario ::= parametros_usuario COMA parametro_usuario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_usuario",29, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_usuario ::= parametro_usuario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_usuario",29, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_usuario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_usuario",29, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_formulario ::= parametros_formulario COMA parametro_formulario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_formulario",30, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_formulario ::= parametro_formulario 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_formulario",30, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_formulario ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_formulario",30, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_componente ::= parametros_componente COMA parametro_componente 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_componente",31, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_componente ::= parametro_componente 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_componente",31, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_componente ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_componente",31, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_consulta ::= parametros_consulta COMA parametro_consulta 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_consulta",32, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_consulta ::= parametro_consulta 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_consulta",32, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_consulta ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametros_consulta",32, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametro_usuario ::= datos DOS_PUNTOS datos 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_usuario",33, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametro_formulario ::= datos DOS_PUNTOS datos 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_formulario",34, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametro_formulario ::= ids DOS_PUNTOS cont_ids 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_formulario",34, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametro_formulario ::= titulos DOS_PUNTOS cont_string_spaces 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_formulario",34, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametro_componente ::= datos DOS_PUNTOS datos 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro_componente ::= ids DOS_PUNTOS cont_ids 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametro_componente ::= formulario DOS_PUNTOS cont_ids 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametro_componente ::= texto_visible DOS_PUNTOS cont_string_spaces 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametro_componente ::= opciones DOS_PUNTOS cont_opciones 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametro_componente ::= url DOS_PUNTOS cont_url 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_componente",35, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // datos ::= COMILLAS STRING COMILLAS 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = s; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("datos",36, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // datos ::= cont_ids 
            {
              Token RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token ii = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		RESULT = ii; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("datos",36, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // datos ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("datos",36, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ids ::= COMILLAS ID COMILLAS 
            {
              Token RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token ii = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = ii; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("ids",37, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cont_ids ::= COMILLAS CONT_ID COMILLAS 
            {
              Token RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token ci = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = ci; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_ids",38, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // titulos ::= COMILLAS TITULO COMILLAS 
            {
              Token RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token ti = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = ti; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("titulos",39, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cont_string_spaces ::= COMILLAS STRING_SPACE COMILLAS 
            {
              Token RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token ss = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = ss; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_string_spaces",40, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cont_string_spaces ::= datos 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		RESULT = s; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_string_spaces",40, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // formulario ::= COMILLAS FORMULARIO COMILLAS 
            {
              Token RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = f; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("formulario",41, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // texto_visible ::= COMILLAS TEXTO_VISIBLE COMILLAS 
            {
              Token RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token tv = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = tv; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("texto_visible",42, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opciones ::= COMILLAS OPCIONES COMILLAS 
            {
              Token RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = o; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("opciones",43, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cont_opciones ::= COMILLAS CONT_OPCIONES COMILLAS 
            {
              Token RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token co = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = co; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_opciones",44, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cont_opciones ::= cont_string_spaces 
            {
              Token RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token ss = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		RESULT = ss; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_opciones",44, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // url ::= COMILLAS URL COMILLAS 
            {
              Token RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = u; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("url",45, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cont_url ::= COMILLAS CONT_URL COMILLAS 
            {
              Token RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token u = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = u; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("cont_url",46, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametro_consulta ::= consulta_n DOS_PUNTOS con_consulta 
            {
              Token RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).right;
		Token key = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()).right;
		Token cont = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.peek()).value;
		listaParametros.add(new Parametro(key,cont));
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("parametro_consulta",47, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // consulta_n ::= COMILLAS CONSULTA_N COMILLAS 
            {
              Token RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token cn = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = cn; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("consulta_n",48, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // consulta_n ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("consulta_n",48, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // con_consulta ::= COMILLAS CONT_CONSULTA COMILLAS 
            {
              Token RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-1)).value;
		RESULT = cc; 
              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("con_consulta",49, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.elementAt(CUP$ParserIndigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // con_consulta ::= error 
            {
              Token RESULT =null;

              CUP$ParserIndigo$result = parser.getSymbolFactory().newSymbol("con_consulta",49, ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserIndigo$stack.peek()), RESULT);
            }
          return CUP$ParserIndigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserIndigo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserIndigo$do_action(
    int                        CUP$ParserIndigo$act_num,
    java_cup.runtime.lr_parser CUP$ParserIndigo$parser,
    java.util.Stack            CUP$ParserIndigo$stack,
    int                        CUP$ParserIndigo$top)
    throws java.lang.Exception
    {
              return CUP$ParserIndigo$do_action_part00000000(
                               CUP$ParserIndigo$act_num,
                               CUP$ParserIndigo$parser,
                               CUP$ParserIndigo$stack,
                               CUP$ParserIndigo$top);
    }
}

}
