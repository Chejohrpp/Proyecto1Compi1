// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexerIndigo.flex

/*codigo de usuario*/
package backend.reglasGram;
import backend.objetos.*;
import java_cup.runtime.*;
import static backend.reglasGram.symIndigo.*;
import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\10\1\11"+
    "\1\12\12\13\1\14\1\0\1\15\1\0\1\16\2\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\26\1\30\1\31\1\32\1\33\1\34\1\26"+
    "\1\35\1\36\1\37\1\40\1\41\1\26\1\42\2\26"+
    "\1\43\1\12\1\44\1\0\1\45\1\0\2\26\1\46"+
    "\1\47\1\50\1\51\2\26\1\52\2\26\1\53\1\26"+
    "\1\54\1\55\3\26\1\56\1\57\1\60\5\26\1\61"+
    "\1\62\1\63\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\5\1\7\1\10\1\11\15\5\1\12\1\13\2\5"+
    "\1\14\1\15\3\0\2\16\6\0\1\17\2\0\6\5"+
    "\1\20\11\5\4\0\3\21\1\0\1\17\1\22\16\5"+
    "\1\23\1\0\1\21\2\0\17\5\2\0\17\5\1\0"+
    "\16\5\1\24\1\0\16\5\1\0\13\5\1\25\2\5"+
    "\1\0\1\26\1\0\3\5\1\27\13\5\1\0\1\5"+
    "\1\30\7\5\1\31\6\5\1\26\43\5\1\32\4\5"+
    "\1\33\1\34\1\35\6\5\1\36\17\5\1\37\4\5"+
    "\1\40\1\41\12\5\1\42\3\5\1\43\10\5\1\44"+
    "\2\5\1\45\10\5\1\46\1\47\4\5\1\50\1\51"+
    "\1\52\2\5\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\64\0\234\0\320\0\64"+
    "\0\u0104\0\u0138\0\u016c\0\u01a0\0\64\0\64\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\64\0\64\0\u0478\0\u04ac\0\64"+
    "\0\64\0\u04e0\0\u0514\0\u0548\0\320\0\u057c\0\u05b0\0\u01a0"+
    "\0\u0104\0\u0138\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0208\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\64\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0208"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u0208\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u0208"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\64\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u0208\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u0208\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u18fc\0\u2560\0\u2594"+
    "\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734"+
    "\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4"+
    "\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74"+
    "\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\u0208\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80"+
    "\0\u0208\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u0208"+
    "\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058"+
    "\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u0208"+
    "\0\u31f8\0\u322c\0\u3260\0\u3294\0\u0208\0\u0208\0\u32c8\0\u32fc"+
    "\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c"+
    "\0\u0208\0\u34d0\0\u3504\0\u3538\0\u0208\0\u356c\0\u35a0\0\u35d4"+
    "\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u0208\0\u370c\0\u3740"+
    "\0\u0208\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac"+
    "\0\u38e0\0\u0208\0\u0208\0\u3914\0\u3948\0\u397c\0\u39b0\0\u0208"+
    "\0\u0208\0\u0208\0\u39e4\0\u3a18\0\u0208\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\20\1\22\1\23\2\20\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\20\1\32\1\33\2\20\1\34"+
    "\1\35\1\7\3\20\1\36\1\37\6\20\1\40\1\2"+
    "\1\41\66\0\1\3\62\0\3\42\1\0\1\43\30\0"+
    "\1\44\33\0\1\45\1\0\1\45\2\0\1\46\3\0"+
    "\24\45\2\0\14\45\1\0\1\47\12\0\1\50\63\0"+
    "\1\51\1\52\1\53\1\50\2\0\24\54\3\0\13\54"+
    "\4\0\3\55\2\0\1\20\1\0\1\20\1\56\1\52"+
    "\1\13\3\0\24\20\2\0\14\20\1\0\1\47\13\0"+
    "\1\52\52\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\6\20\1\60\15\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\24\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\14\20\1\61\1\20\1\62\5\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\11\20\1\63"+
    "\12\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\64\3\20\1\65\7\20\2\0\5\20\1\64\6\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\3\20\1\66\7\20\1\67"+
    "\10\20\2\0\7\20\1\67\4\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\14\20\1\70\7\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\14\20\1\71\7\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\72\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\15\20\1\73\6\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\74\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\4\20\1\75\3\20"+
    "\1\76\13\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\16\20\1\77\5\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\10\20\1\64\13\20\2\0\5\20\1\64\6\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\13\20\1\67\10\20\2\0"+
    "\7\20\1\67\4\20\1\0\1\47\2\0\3\42\32\0"+
    "\1\44\26\0\3\42\1\0\1\43\101\0\1\100\46\0"+
    "\1\45\1\0\1\45\1\101\1\0\1\46\3\0\24\45"+
    "\2\0\14\45\1\0\1\47\2\0\2\102\1\103\2\0"+
    "\1\104\1\0\1\104\2\0\1\105\3\0\24\106\2\0"+
    "\1\104\13\106\4\0\3\54\2\0\1\54\1\0\1\54"+
    "\1\107\1\52\1\53\3\0\24\54\2\0\14\54\4\0"+
    "\3\54\2\0\1\54\1\0\1\54\1\57\1\52\1\53"+
    "\3\0\24\54\2\0\14\54\4\0\3\55\2\0\1\55"+
    "\1\0\1\55\1\57\1\52\1\110\3\0\24\55\2\0"+
    "\14\55\1\0\1\47\14\0\1\20\3\0\24\111\3\0"+
    "\13\111\22\0\24\111\3\0\13\111\4\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\16\20"+
    "\1\112\5\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\13\20\1\113\10\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\4\20\1\114\17\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\10\20\1\115\13\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\13\20\1\116\10\20\2\0\7\20"+
    "\1\116\4\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\117"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\120\13\20\2\0\5\20\1\120\6\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\6\20\1\121\15\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\3\20\1\122\20\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\4\20\1\123\17\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\2\20\1\124\21\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\125"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\23\20"+
    "\1\126\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\20\20"+
    "\1\127\3\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\11\20\1\130\12\20\2\0\14\20\1\0\1\47\31\0"+
    "\1\131\46\0\1\45\56\0\1\104\1\0\1\104\2\0"+
    "\1\105\3\0\24\106\2\0\1\104\13\106\5\0\1\102"+
    "\3\0\1\104\1\0\1\104\2\0\1\105\3\0\24\106"+
    "\2\0\1\104\13\106\11\0\1\104\1\0\1\104\2\0"+
    "\1\132\3\0\24\104\2\0\14\104\1\0\1\47\2\0"+
    "\3\106\2\0\1\106\1\0\1\106\1\133\1\0\1\105"+
    "\3\0\24\106\2\0\14\106\1\0\1\47\2\0\3\106"+
    "\2\0\1\106\1\0\1\106\2\0\1\105\3\0\24\106"+
    "\2\0\14\106\1\0\1\47\14\0\1\54\3\0\24\111"+
    "\3\0\13\111\4\0\3\55\2\0\1\55\1\0\1\55"+
    "\1\134\1\52\1\110\3\0\24\55\2\0\14\55\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\4\20\1\135\17\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\17\20\1\136\4\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\137\2\20\1\140"+
    "\20\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\12\20"+
    "\1\141\11\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\24\20\2\0\1\142\13\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\12\20\1\143\11\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\24\20\2\0\1\144\13\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\10\20\1\145\13\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\10\20\1\146\13\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\22\20\1\147\1\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\10\20\1\150\13\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\151\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\20\20\1\152\3\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\21\20\1\153"+
    "\2\20\2\0\14\20\1\0\1\47\24\0\1\154\46\0"+
    "\1\104\1\0\1\104\1\155\1\0\1\132\3\0\24\104"+
    "\2\0\14\104\1\0\1\47\14\0\1\106\63\0\1\55"+
    "\3\0\24\111\3\0\13\111\4\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\6\20\1\156"+
    "\15\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\21\20"+
    "\1\157\2\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\16\20\1\160\5\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\4\20\1\161\17\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\10\20\1\162\13\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\17\20\1\163\4\20\2\0\11\20"+
    "\1\163\2\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\21\20\1\164"+
    "\2\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\17\20"+
    "\1\165\4\20\2\0\11\20\1\165\2\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\13\20\1\166\10\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\5\20\1\167\16\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\170\7\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\14\20\1\171\7\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\12\20\1\172"+
    "\11\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\14\20"+
    "\1\173\7\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\11\20\1\174\12\20\2\0\14\20\1\0\1\47\22\0"+
    "\1\175\55\0\1\104\51\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\176\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\11\20\1\177\12\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\24\20\2\0"+
    "\1\200\13\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\13\20\1\201"+
    "\10\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\13\20"+
    "\1\202\10\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\14\20\1\203\7\20\2\0\10\20\1\203\3\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\11\20\1\204\12\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\205\7\20\2\0"+
    "\10\20\1\205\3\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\24\20"+
    "\2\0\1\206\13\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\207\13\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\24\20\2\0\1\210\13\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\13\20\1\211\10\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\4\20\1\212\17\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\24\20\2\0\1\213\13\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\14\20\1\214\7\20\2\0\14\20\1\0"+
    "\1\47\40\0\1\215\25\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\16\20\1\216\5\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\20\20\1\217"+
    "\3\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\21\20"+
    "\1\220\2\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\2\20\1\221\21\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\1\222\23\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\11\20\1\223\12\20\2\0\6\20\1\223\5\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\1\224\23\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\11\20\1\225\12\20\2\0"+
    "\6\20\1\225\5\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\21\20"+
    "\1\226\2\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\2\20\1\227\21\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\5\20\1\230\16\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\4\20\1\231\17\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\20\20\1\232\3\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\22\20\1\233\1\20\2\0"+
    "\14\20\1\0\1\47\1\0\44\215\1\234\17\215\1\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\24\20\2\0\1\235\13\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\1\236\23\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\17\20\1\237\4\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\10\20\1\240\13\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\16\20\1\241\5\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\10\20\1\242\13\20\2\0"+
    "\5\20\1\242\6\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\16\20"+
    "\1\243\5\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\10\20\1\244\13\20\2\0\5\20\1\244\6\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\17\20\1\245\4\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\1\246\23\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\247\7\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\17\20\1\250\4\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\251"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\252\13\20\2\0\14\20\1\0\1\47\1\0\1\215"+
    "\3\253\1\215\1\254\36\215\1\255\17\215\1\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\2\20\1\256\21\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\257\1\57\1\52\1\13"+
    "\3\0\16\20\1\260\1\261\4\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\262\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\1\263\23\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\24\20\2\0\1\264\13\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\2\20\1\265\21\20\2\0"+
    "\1\20\1\265\12\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\266\13\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\2\20\1\267\21\20\2\0\1\20\1\267\12\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\270\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\16\20\1\271\5\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\16\20\1\272\5\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\14\20\1\273"+
    "\7\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\17\20"+
    "\1\274\4\20\2\0\14\20\1\0\1\47\1\0\1\215"+
    "\3\275\1\215\1\254\36\215\1\0\20\215\3\253\1\215"+
    "\1\0\36\215\1\255\17\215\1\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\14\20\1\276"+
    "\7\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\277\3\0\24\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\24\20\2\0"+
    "\1\300\13\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\1\301\23\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\11\20\1\302"+
    "\12\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\2\20"+
    "\1\303\2\20\1\304\13\20\1\305\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\10\20\1\306\13\20\2\0"+
    "\5\20\1\306\6\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\14\20"+
    "\1\307\7\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\10\20\1\310\13\20\2\0\5\20\1\310\6\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\1\311\23\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\24\20\2\0\1\312\13\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\12\20\1\313\11\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\17\20\1\314\4\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\10\20\1\315\13\20"+
    "\2\0\14\20\1\0\1\47\1\0\1\215\3\275\1\215"+
    "\1\316\36\215\1\234\17\215\1\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\12\20\1\317"+
    "\11\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\56\1\52\1\277\3\0\24\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\3\20\1\320"+
    "\20\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\16\20"+
    "\1\321\5\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\4\20\1\322\17\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\14\20\1\323\7\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\14\20\1\324\7\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\17\20\1\325\4\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\20\20\1\326\3\20\2\0"+
    "\12\20\1\326\1\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\20\20"+
    "\1\327\3\20\2\0\12\20\1\327\1\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\16\20\1\330\5\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\2\20\1\331\2\20\1\332\13\20"+
    "\1\333\2\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\21\20\1\334\2\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\24\20\2\0\1\335\13\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\1\20\1\336\22\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\15\20\1\337\6\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\1\340\23\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\10\20\1\341\13\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\17\20\1\342\4\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\12\20\1\343\11\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\344"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\21\20"+
    "\1\345\2\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\21\20\1\346\2\20\2\0\13\20\1\346\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\21\20\1\347\2\20\2\0\13\20\1\347"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\10\20\1\350\13\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\14\20\1\351\7\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\14\20\1\352"+
    "\7\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\17\20"+
    "\1\353\4\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\11\20\1\354\12\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\2\20\1\355\2\20\1\356\16\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\11\20\1\357\12\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\14\20\1\360\7\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\20\20\1\361"+
    "\3\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\14\20"+
    "\1\362\7\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\24\20\2\0\1\363\13\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\15\20\1\364\6\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\12\20\1\365\11\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\1\366\23\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\3\20\1\367\20\20\2\0\2\20\1\367"+
    "\11\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\3\20\1\370\20\20"+
    "\2\0\2\20\1\370\11\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\14\20\1\371\7\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\12\20\1\372\11\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\16\20\1\373\5\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\374\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\1\375\23\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\376\7\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\14\20\1\377\7\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\4\20\1\u0100"+
    "\17\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\13\20"+
    "\1\u0101\10\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\14\20\1\u0102\7\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\21\20\1\u0103\2\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\14\20\1\u0104\7\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\u0105\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\16\20\1\u0106\5\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\4\20\1\u0107\17\20"+
    "\2\0\3\20\1\u0107\10\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\4\20\1\u0108\17\20\2\0\3\20\1\u0108\10\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\15\20\1\u0109\6\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\12\20\1\u010a\11\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\u010b\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\16\20\1\u010c\5\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\12\20\1\u010d"+
    "\11\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\16\20"+
    "\1\u010e\5\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\4\20\1\u010f\17\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\17\20\1\u0110\4\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\17\20\1\u0111\4\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\13\20\1\u0112\10\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\11\20\1\u0113\12\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\10\20\1\u0114\13\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\17\20\1\u0115"+
    "\4\20\2\0\11\20\1\u0115\2\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\17\20\1\u0116\4\20\2\0\11\20\1\u0116\2\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\u0117\7\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\21\20\1\u0118\2\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\u0119"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\10\20"+
    "\1\u011a\13\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\15\20\1\u011b\6\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\12\20\1\u011c\11\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\13\20\1\u011d\10\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\u011e\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\4\20\1\u011f\17\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\u0120\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\14\20\1\u0121\7\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\13\20\1\u0122"+
    "\10\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\11\20"+
    "\1\u0123\12\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\10\20\1\u0124\13\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\14\20\1\u0125\7\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\14\20\1\u0126\7\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\21\20\1\u0127\2\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\20\20\1\u0128\3\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\1\u0129\23\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\13\20\1\u012a\10\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\16\20\1\u012b"+
    "\5\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\4\20"+
    "\1\u012c\17\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\1\u012d\23\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\14\20\1\u012e\7\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\13\20\1\u012f\10\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\11\20\1\u0130\12\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\4\20\1\u0131\17\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\16\20\1\u0132\5\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\20\20\1\u0133\3\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\10\20\1\u0134"+
    "\13\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\13\20"+
    "\1\u0135\10\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\16\20\1\u0136\5\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\4\20\1\u0137\17\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\1\u0138\23\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\10\20\1\u0139\13\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\4\20\1\u013a\17\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\14\20\1\u013b\7\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\20\20\1\u013c\3\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\10\20\1\u013d"+
    "\13\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\13\20"+
    "\1\u013e\10\20\2\0\14\20\1\0\1\47\2\0\3\55"+
    "\2\0\1\20\1\0\1\20\1\57\1\52\1\13\3\0"+
    "\16\20\1\u013f\5\20\2\0\14\20\1\0\1\47\2\0"+
    "\3\55\2\0\1\20\1\0\1\20\1\57\1\52\1\13"+
    "\3\0\14\20\1\u0140\7\20\2\0\14\20\1\0\1\47"+
    "\2\0\3\55\2\0\1\20\1\0\1\20\1\57\1\52"+
    "\1\13\3\0\4\20\1\u0141\17\20\2\0\14\20\1\0"+
    "\1\47\2\0\3\55\2\0\1\20\1\0\1\20\1\57"+
    "\1\52\1\13\3\0\14\20\1\u0142\7\20\2\0\14\20"+
    "\1\0\1\47\2\0\3\55\2\0\1\20\1\0\1\20"+
    "\1\57\1\52\1\13\3\0\20\20\1\u0143\3\20\2\0"+
    "\14\20\1\0\1\47\2\0\3\55\2\0\1\20\1\0"+
    "\1\20\1\57\1\52\1\13\3\0\10\20\1\u0144\13\20"+
    "\2\0\14\20\1\0\1\47\2\0\3\55\2\0\1\20"+
    "\1\0\1\20\1\57\1\52\1\13\3\0\4\20\1\u0145"+
    "\17\20\2\0\14\20\1\0\1\47\2\0\3\55\2\0"+
    "\1\20\1\0\1\20\1\57\1\52\1\13\3\0\14\20"+
    "\1\u0146\7\20\2\0\14\20\1\0\1\47\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14924];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\4\1\2\11"+
    "\15\1\2\11\2\1\2\11\3\0\2\1\6\0\1\1"+
    "\2\0\20\1\4\0\3\1\1\0\1\1\1\11\17\1"+
    "\1\0\1\1\2\0\17\1\2\0\17\1\1\0\17\1"+
    "\1\0\16\1\1\0\16\1\1\0\1\11\1\0\17\1"+
    "\1\0\211\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     List<LosErrores> errores = new ArrayList<LosErrores>();

     private void estructuraError(String charError, int linea, int columna){
     	String elError = "Error: No se reconoce el caracter: " + charError + " -> {Linea: "+ linea +", Columna: "+ columna +" }" ;
     	errores.add(new LosErrores(elError));
     }
     public List getErroresLexicos(){
     	return errores;
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(symIndigo.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { estructuraError(yytext(),yyline+1,yycolumn+1);
            }
            // fall through
          case 45: break;
          case 2:
            { /* ignorar */
            }
            // fall through
          case 46: break;
          case 3:
            { return new Symbol(ADMIRACION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 47: break;
          case 4:
            { return new Symbol(COMILLAS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 48: break;
          case 5:
            { return new Symbol(STRING,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 49: break;
          case 6:
            { return new Symbol(COMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 50: break;
          case 7:
            { return new Symbol(DOS_PUNTOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 51: break;
          case 8:
            { return new Symbol(MENQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 52: break;
          case 9:
            { return new Symbol(MAQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 53: break;
          case 10:
            { return new Symbol(CORI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 54: break;
          case 11:
            { return new Symbol(CORD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 55: break;
          case 12:
            { return new Symbol(LLAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 56: break;
          case 13:
            { return new Symbol(LLAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 57: break;
          case 14:
            { return new Symbol(CONT_ID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 58: break;
          case 15:
            { return new Symbol(STRING_SPACE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 59: break;
          case 16:
            { return new Symbol(ID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 60: break;
          case 17:
            { return new Symbol(CONT_OPCIONES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 61: break;
          case 18:
            { return new Symbol(CONT_URL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 62: break;
          case 19:
            { return new Symbol(URL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 63: break;
          case 20:
            { return new Symbol(TITULO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 64: break;
          case 21:
            { return new Symbol(OPCIONES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 65: break;
          case 22:
            { return new Symbol(CONT_CONSULTA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 66: break;
          case 23:
            { return new Symbol(CONSULTAS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 67: break;
          case 24:
            { return new Symbol(CONSULTA_N,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 68: break;
          case 25:
            { return new Symbol(FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 69: break;
          case 26:
            { return new Symbol(CREAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 70: break;
          case 27:
            { return new Symbol(FIN_SOLICITUD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 71: break;
          case 28:
            { return new Symbol(INI_SOLICITUD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 72: break;
          case 29:
            { return new Symbol(LOGIN_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 73: break;
          case 30:
            { return new Symbol(TEXTO_VISIBLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 74: break;
          case 31:
            { return new Symbol(CONSULTAR_DATOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 75: break;
          case 32:
            { return new Symbol(FIN_SOLICITUDES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 76: break;
          case 33:
            { return new Symbol(INI_SOLICITUDES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 77: break;
          case 34:
            { return new Symbol(ELIMINAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 78: break;
          case 35:
            { return new Symbol(NUEVO_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 79: break;
          case 36:
            { return new Symbol(MODIFICAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 80: break;
          case 37:
            { return new Symbol(AGREGAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 81: break;
          case 38:
            { return new Symbol(ELIMINAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 82: break;
          case 39:
            { return new Symbol(ELIMINAR_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 83: break;
          case 40:
            { return new Symbol(CREDENCIALES_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 84: break;
          case 41:
            { return new Symbol(MODIFICAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 85: break;
          case 42:
            { return new Symbol(MODIFICAR_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 86: break;
          case 43:
            { return new Symbol(PARAMETROS_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 87: break;
          case 44:
            { return new Symbol(PARAMETROS_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
