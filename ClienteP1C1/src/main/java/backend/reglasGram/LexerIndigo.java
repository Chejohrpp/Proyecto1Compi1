// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexerIndigo.flex

/*codigo de usuario*/
package backend.reglasGram;
import backend.objetos.*;
import java_cup.runtime.*;
import static backend.reglasGram.symIndigo.*;
import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerIndigo implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\10\1\11"+
    "\1\12\12\13\1\14\1\0\1\15\1\0\1\16\2\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\26\1\30\1\31\1\32\1\33\1\34\1\26"+
    "\1\35\1\36\1\37\1\40\1\41\1\26\1\42\2\26"+
    "\1\43\1\44\1\45\1\0\1\46\1\0\2\26\1\47"+
    "\1\50\1\51\1\52\1\26\1\53\1\54\2\26\1\55"+
    "\1\26\1\56\1\57\1\60\2\26\1\61\1\62\1\63"+
    "\5\26\1\64\1\65\1\66\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\1\1\5\1\7\1\10\1\11\15\5\1\12\1\13"+
    "\3\5\1\14\1\15\3\0\2\16\2\0\1\17\1\20"+
    "\1\21\6\5\1\22\12\5\1\0\1\5\2\0\2\23"+
    "\1\20\1\0\16\5\1\24\1\5\1\0\20\5\1\0"+
    "\17\5\1\0\1\5\1\0\16\5\1\25\1\0\16\5"+
    "\1\0\13\5\1\26\2\5\1\0\1\27\1\0\3\5"+
    "\1\30\13\5\1\0\1\5\1\31\7\5\1\32\6\5"+
    "\1\27\43\5\1\33\4\5\1\34\1\35\1\36\6\5"+
    "\1\37\17\5\1\40\4\5\1\41\1\42\12\5\1\43"+
    "\3\5\1\44\10\5\1\45\2\5\1\46\10\5\1\47"+
    "\1\50\4\5\1\51\1\52\1\53\2\5\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\67\0\245\0\334\0\67"+
    "\0\u0113\0\u014a\0\u0181\0\67\0\67\0\67\0\u01b8\0\u01ef"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\67\0\67\0\u0483\0\u04ba\0\u04f1"+
    "\0\67\0\67\0\u0528\0\u055f\0\u0596\0\334\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0181\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u014a\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0181\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u0181"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u0181\0\u1fcc\0\u2003\0\u203a\0\67"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u0181\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u20df\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u0181\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675"+
    "\0\u26ac\0\u19ff\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e"+
    "\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u0181\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u0181\0\u2fb2\0\u2fe9\0\u3020"+
    "\0\u3057\0\u308e\0\u30c5\0\u0181\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u0181\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u0181\0\u0181\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u365b\0\u3692\0\u36c9\0\u3700\0\u0181\0\u3737\0\u376e\0\u37a5"+
    "\0\u0181\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926"+
    "\0\u395d\0\u0181\0\u3994\0\u39cb\0\u0181\0\u3a02\0\u3a39\0\u3a70"+
    "\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u0181\0\u0181\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f\0\u0181\0\u0181\0\u0181\0\u3c96\0\u3ccd"+
    "\0\u0181\0\u0181";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\20\1\22\1\23\2\20\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\20\1\32\1\33\2\20\1\34"+
    "\1\12\1\35\1\7\3\20\1\36\1\37\1\40\7\20"+
    "\1\41\1\2\1\42\71\0\1\3\65\0\3\43\1\0"+
    "\1\44\30\0\1\45\36\0\1\46\1\0\1\46\1\11"+
    "\1\0\1\47\3\0\24\46\3\0\16\46\1\0\1\50"+
    "\7\0\1\11\1\0\2\11\1\0\1\11\3\0\24\11"+
    "\3\0\16\11\1\0\1\50\14\0\1\51\3\0\24\51"+
    "\4\0\15\51\4\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\24\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\54\2\0\6\13\1\55\15\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\1\54\2\0\24\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\1\54\2\0"+
    "\14\13\1\56\1\13\1\57\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\1\54\2\0\11\13\1\60\12\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\1\54\2\0"+
    "\10\13\1\61\3\13\1\62\7\13\1\0\1\53\1\0"+
    "\6\13\1\61\7\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\1\54\2\0\3\13"+
    "\1\63\7\13\1\64\10\13\1\0\1\53\1\0\10\13"+
    "\1\64\5\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\1\54\2\0\14\13\1\65"+
    "\7\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\1\54"+
    "\2\0\14\13\1\66\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\54\2\0\21\13\1\67\2\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\1\54\2\0\15\13"+
    "\1\70\6\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\1\54\2\0\1\71\23\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\54\2\0\4\13\1\72\3\13\1\73"+
    "\13\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\1\54"+
    "\2\0\16\13\1\74\5\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\54\2\0\10\13\1\61\13\13\1\0"+
    "\1\53\1\0\6\13\1\61\7\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\1\54"+
    "\2\0\24\13\1\0\1\53\1\0\14\13\1\75\1\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\54\2\0\13\13\1\64\10\13\1\0"+
    "\1\53\1\0\10\13\1\64\5\13\1\0\1\50\2\0"+
    "\3\43\32\0\1\45\31\0\3\43\1\0\1\44\104\0"+
    "\1\76\51\0\1\46\1\0\1\46\1\77\1\0\1\47"+
    "\3\0\24\46\3\0\16\46\1\0\1\50\2\0\2\100"+
    "\1\101\2\0\1\102\1\0\2\102\1\0\1\103\3\0"+
    "\24\103\3\0\1\102\15\103\4\0\3\51\2\0\1\51"+
    "\1\0\2\51\1\53\1\51\3\0\24\51\1\0\1\53"+
    "\1\0\16\51\4\0\3\52\2\0\1\52\1\0\2\52"+
    "\1\53\1\52\3\0\24\52\1\0\1\53\1\0\16\52"+
    "\1\0\1\50\14\0\1\104\3\0\24\104\4\0\15\104"+
    "\15\0\1\105\1\51\3\0\24\51\1\0\1\105\2\0"+
    "\15\51\4\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\16\13\1\106\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\13\13\1\107\10\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\4\13\1\110"+
    "\17\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\10\13\1\111\13\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\13\13\1\112\10\13\1\0\1\53\1\0"+
    "\10\13\1\112\5\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\16\13\1\113"+
    "\5\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\10\13\1\114\13\13\1\0\1\53\1\0\6\13\1\114"+
    "\7\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\6\13\1\115\15\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\3\13\1\116"+
    "\20\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\4\13\1\117\17\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\2\13\1\120\21\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\16\13\1\121\5\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\23\13\1\122"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\20\13"+
    "\1\123\3\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\11\13\1\124\12\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\24\13\1\0\1\53\1\0\14\13"+
    "\1\125\1\13\1\0\1\50\31\0\1\126\44\0\1\11"+
    "\1\0\2\11\1\0\1\46\3\0\24\11\3\0\16\11"+
    "\1\0\1\50\7\0\1\102\1\0\2\102\1\0\1\103"+
    "\3\0\24\103\3\0\1\102\15\103\5\0\1\100\3\0"+
    "\1\102\1\0\2\102\1\0\1\103\3\0\24\103\3\0"+
    "\1\102\15\103\11\0\1\102\1\0\2\102\1\0\1\102"+
    "\3\0\24\102\3\0\16\102\1\0\1\50\2\0\3\103"+
    "\2\0\1\103\1\0\2\103\1\0\1\103\3\0\24\103"+
    "\3\0\16\103\1\0\1\50\2\0\3\104\2\0\1\104"+
    "\1\0\2\104\1\53\1\104\3\0\24\104\1\0\1\53"+
    "\1\0\16\104\4\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\4\13\1\127\17\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\17\13\1\130\4\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\1\131"+
    "\2\13\1\132\20\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\12\13\1\133\11\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\24\13\1\0\1\53\1\0"+
    "\1\134\15\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\12\13\1\135\11\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\24\13"+
    "\1\0\1\53\1\0\1\136\15\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\10\13\1\137\13\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\10\13\1\140\13\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\22\13\1\141\1\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\10\13\1\142"+
    "\13\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\1\143\23\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\20\13\1\144\3\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\21\13\1\145\2\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\24\13\1\0\1\53"+
    "\1\0\12\13\1\146\3\13\1\0\1\50\24\0\1\147"+
    "\44\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\6\13\1\150\15\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\21\13\1\151\2\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\16\13\1\152\5\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\4\13"+
    "\1\153\17\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\10\13\1\154\13\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\17\13\1\155\4\13\1\0\1\53"+
    "\1\0\13\13\1\155\2\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\21\13"+
    "\1\156\2\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\17\13\1\157\4\13\1\0\1\53\1\0\13\13"+
    "\1\157\2\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\13\13\1\160\10\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\5\13"+
    "\1\161\16\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\14\13\1\162\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\163\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\12\13\1\164\11\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\14\13"+
    "\1\165\7\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\11\13\1\166\12\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\1\167\2\0\24\13\1\0\1\53\1\0"+
    "\13\13\1\170\2\13\1\0\1\50\22\0\1\171\46\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\1\172\23\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\11\13\1\173\12\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\24\13\1\0\1\53\1\0\1\174"+
    "\15\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\13\13\1\175\10\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\13\13\1\176"+
    "\10\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\14\13\1\177\7\13\1\0\1\53\1\0\11\13\1\177"+
    "\4\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\11\13\1\200\12\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\14\13\1\201"+
    "\7\13\1\0\1\53\1\0\11\13\1\201\4\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\24\13\1\0\1\53\1\0\1\202\15\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\10\13\1\203\13\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\24\13\1\0\1\53"+
    "\1\0\1\204\15\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\13\13\1\205"+
    "\10\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\4\13\1\206\17\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\24\13\1\0\1\53\1\0\1\207\15\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\210\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\13\0\1\54\55\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\1\167\2\0"+
    "\24\13\1\0\1\53\1\0\16\13\1\0\1\50\40\0"+
    "\1\211\30\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\16\13\1\212\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\20\13\1\213\3\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\21\13\1\214"+
    "\2\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\2\13\1\215\21\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\1\216\23\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\11\13\1\217\12\13\1\0\1\53"+
    "\1\0\7\13\1\217\6\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\1\220"+
    "\23\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\11\13\1\221\12\13\1\0\1\53\1\0\7\13\1\221"+
    "\6\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\21\13\1\222\2\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\2\13\1\223"+
    "\21\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\5\13\1\224\16\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\4\13\1\225\17\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\20\13\1\226\3\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\22\13\1\227"+
    "\1\13\1\0\1\53\1\0\16\13\1\0\1\50\1\0"+
    "\45\211\1\230\21\211\1\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\24\13\1\0\1\53\1\0"+
    "\1\231\15\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\1\232\23\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\17\13\1\233"+
    "\4\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\10\13\1\234\13\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\16\13\1\235\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\10\13\1\236\13\13\1\0"+
    "\1\53\1\0\6\13\1\236\7\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\16\13\1\237\5\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\10\13\1\240\13\13\1\0\1\53\1\0"+
    "\6\13\1\240\7\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\17\13\1\241"+
    "\4\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\1\242\23\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\14\13\1\243\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\17\13\1\244\4\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\16\13\1\245\5\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\10\13"+
    "\1\246\13\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\1\0\1\211\3\247\1\211\1\250\37\211\1\251\21\211"+
    "\1\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\2\13\1\252\21\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\1\253"+
    "\1\13\1\53\1\13\3\0\16\13\1\254\1\255\4\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\21\13"+
    "\1\256\2\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\1\257\23\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\24\13\1\0\1\53\1\0\1\260\15\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\2\13\1\261\21\13\1\0\1\53"+
    "\1\0\1\13\1\261\14\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\10\13"+
    "\1\262\13\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\2\13\1\263\21\13\1\0\1\53\1\0\1\13"+
    "\1\263\14\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\21\13\1\264\2\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\16\13"+
    "\1\265\5\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\16\13\1\266\5\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\267\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\17\13\1\270\4\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\1\0\1\211"+
    "\3\271\1\211\1\250\37\211\1\0\22\211\3\247\1\211"+
    "\1\0\37\211\1\251\21\211\1\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\272\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\273\3\0\24\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\24\13"+
    "\1\0\1\53\1\0\1\274\15\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\1\275\23\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\11\13\1\276\12\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\2\13\1\277\2\13\1\300\13\13"+
    "\1\301\2\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\10\13\1\302\13\13\1\0\1\53\1\0\6\13"+
    "\1\302\7\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\303\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\10\13"+
    "\1\304\13\13\1\0\1\53\1\0\6\13\1\304\7\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\1\305\23\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\24\13\1\0\1\53\1\0"+
    "\1\306\15\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\12\13\1\307\11\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\17\13"+
    "\1\310\4\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\10\13\1\311\13\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\1\0\1\211\3\271\1\211\1\312\37\211"+
    "\1\230\21\211\1\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\12\13\1\313\11\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\3\13\1\314\20\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\16\13"+
    "\1\315\5\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\4\13\1\316\17\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\317\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\320\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\17\13"+
    "\1\321\4\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\20\13\1\322\3\13\1\0\1\53\1\0\14\13"+
    "\1\322\1\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\20\13\1\323\3\13"+
    "\1\0\1\53\1\0\14\13\1\323\1\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\16\13\1\324\5\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\2\13\1\325\2\13\1\326\13\13"+
    "\1\327\2\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\21\13\1\330\2\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\24\13\1\0\1\53\1\0\1\331"+
    "\15\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\1\13\1\332\22\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\15\13\1\333"+
    "\6\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\1\334\23\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\10\13\1\335\13\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\17\13\1\336\4\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\12\13\1\337\11\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\16\13"+
    "\1\340\5\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\21\13\1\341\2\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\21\13\1\342\2\13\1\0\1\53"+
    "\1\0\15\13\1\342\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\21\13\1\343"+
    "\2\13\1\0\1\53\1\0\15\13\1\343\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\10\13\1\344\13\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\345\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\346\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\17\13"+
    "\1\347\4\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\11\13\1\350\12\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\2\13\1\351\2\13\1\352\16\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\11\13"+
    "\1\353\12\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\14\13\1\354\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\20\13\1\355\3\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\356\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\24\13"+
    "\1\0\1\53\1\0\1\357\15\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\15\13\1\360\6\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\12\13\1\361\11\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\1\362\23\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\3\13\1\363\20\13"+
    "\1\0\1\53\1\0\2\13\1\363\13\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\3\13\1\364\20\13\1\0\1\53\1\0\2\13"+
    "\1\364\13\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\365\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\12\13"+
    "\1\366\11\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\16\13\1\367\5\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\21\13\1\370\2\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\1\371\23\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\14\13\1\372"+
    "\7\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\14\13\1\373\7\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\4\13\1\374\17\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\13\13\1\375\10\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\14\13\1\376"+
    "\7\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\21\13\1\377\2\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\14\13\1\u0100\7\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\21\13\1\u0101\2\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\16\13\1\u0102"+
    "\5\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\4\13\1\u0103\17\13\1\0\1\53\1\0\3\13\1\u0103"+
    "\12\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\4\13\1\u0104\17\13\1\0"+
    "\1\53\1\0\3\13\1\u0104\12\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\15\13\1\u0105\6\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\12\13\1\u0106\11\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\1\u0107\23\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\16\13\1\u0108\5\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\12\13"+
    "\1\u0109\11\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\16\13\1\u010a\5\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\4\13\1\u010b\17\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\17\13\1\u010c\4\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\17\13"+
    "\1\u010d\4\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\13\13\1\u010e\10\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\11\13\1\u010f\12\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\10\13\1\u0110\13\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\17\13"+
    "\1\u0111\4\13\1\0\1\53\1\0\13\13\1\u0111\2\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\17\13\1\u0112\4\13\1\0\1\53"+
    "\1\0\13\13\1\u0112\2\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\14\13"+
    "\1\u0113\7\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\21\13\1\u0114\2\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\16\13\1\u0115\5\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\10\13\1\u0116\13\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\15\13"+
    "\1\u0117\6\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\12\13\1\u0118\11\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\13\13\1\u0119\10\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\21\13\1\u011a\2\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\4\13"+
    "\1\u011b\17\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\1\u011c\23\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\14\13\1\u011d\7\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\13\13\1\u011e\10\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\11\13\1\u011f"+
    "\12\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\10\13\1\u0120\13\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\14\13\1\u0121\7\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\14\13\1\u0122\7\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\21\13\1\u0123"+
    "\2\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\20\13\1\u0124\3\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\1\u0125\23\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\13\13\1\u0126\10\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\16\13\1\u0127\5\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\4\13"+
    "\1\u0128\17\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\1\u0129\23\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\14\13\1\u012a\7\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\13\13\1\u012b\10\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\11\13\1\u012c"+
    "\12\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\4\13\1\u012d\17\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\16\13\1\u012e\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\20\13\1\u012f\3\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\10\13\1\u0130"+
    "\13\13\1\0\1\53\1\0\16\13\1\0\1\50\2\0"+
    "\3\52\2\0\1\13\1\0\2\13\1\53\1\13\3\0"+
    "\13\13\1\u0131\10\13\1\0\1\53\1\0\16\13\1\0"+
    "\1\50\2\0\3\52\2\0\1\13\1\0\2\13\1\53"+
    "\1\13\3\0\16\13\1\u0132\5\13\1\0\1\53\1\0"+
    "\16\13\1\0\1\50\2\0\3\52\2\0\1\13\1\0"+
    "\2\13\1\53\1\13\3\0\4\13\1\u0133\17\13\1\0"+
    "\1\53\1\0\16\13\1\0\1\50\2\0\3\52\2\0"+
    "\1\13\1\0\2\13\1\53\1\13\3\0\1\u0134\23\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\10\13"+
    "\1\u0135\13\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\4\13\1\u0136\17\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\14\13\1\u0137\7\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\20\13\1\u0138\3\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\10\13"+
    "\1\u0139\13\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\13\13\1\u013a\10\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\16\13\1\u013b\5\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\14\13\1\u013c\7\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\4\13"+
    "\1\u013d\17\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\14\13\1\u013e\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\2\0\3\52\2\0\1\13\1\0\2\13"+
    "\1\53\1\13\3\0\20\13\1\u013f\3\13\1\0\1\53"+
    "\1\0\16\13\1\0\1\50\2\0\3\52\2\0\1\13"+
    "\1\0\2\13\1\53\1\13\3\0\10\13\1\u0140\13\13"+
    "\1\0\1\53\1\0\16\13\1\0\1\50\2\0\3\52"+
    "\2\0\1\13\1\0\2\13\1\53\1\13\3\0\4\13"+
    "\1\u0141\17\13\1\0\1\53\1\0\16\13\1\0\1\50"+
    "\2\0\3\52\2\0\1\13\1\0\2\13\1\53\1\13"+
    "\3\0\14\13\1\u0142\7\13\1\0\1\53\1\0\16\13"+
    "\1\0\1\50\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\3\1\3\11"+
    "\15\1\2\11\3\1\2\11\3\0\2\1\2\0\24\1"+
    "\1\0\1\1\2\0\3\1\1\0\20\1\1\0\20\1"+
    "\1\0\17\1\1\0\1\1\1\0\17\1\1\0\16\1"+
    "\1\0\16\1\1\0\1\11\1\0\17\1\1\0\211\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     List<LosErrores> errores = new ArrayList<LosErrores>();

     private void estructuraError(String charError, int linea, int columna){
     	String elError = "Error: No se reconoce el caracter: " + charError + " -> {Linea: "+ linea +", Columna: "+ columna +" }" ;
     	errores.add(new LosErrores(elError));
     }
     public List getErroresLexicos(){
     	return errores;
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerIndigo(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(symIndigo.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { estructuraError(yytext(),yyline+1,yycolumn+1);
            }
            // fall through
          case 46: break;
          case 2:
            { /* ignorar */
            }
            // fall through
          case 47: break;
          case 3:
            { return new Symbol(ADMIRACION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 48: break;
          case 4:
            { return new Symbol(COMILLAS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 49: break;
          case 5:
            { return new Symbol(STRING,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 50: break;
          case 6:
            { return new Symbol(COMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 51: break;
          case 7:
            { return new Symbol(DOS_PUNTOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 52: break;
          case 8:
            { return new Symbol(MENQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 53: break;
          case 9:
            { return new Symbol(MAQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 54: break;
          case 10:
            { return new Symbol(CORI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 55: break;
          case 11:
            { return new Symbol(CORD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 56: break;
          case 12:
            { return new Symbol(LLAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 57: break;
          case 13:
            { return new Symbol(LLAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 58: break;
          case 14:
            { return new Symbol(CONT_ID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 59: break;
          case 15:
            { return new Symbol(STRING_SPACE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 60: break;
          case 16:
            { return new Symbol(CONT_URL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 61: break;
          case 17:
            { 
            }
            // fall through
          case 62: break;
          case 18:
            { return new Symbol(ID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 63: break;
          case 19:
            { return new Symbol(CONT_OPCIONES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 64: break;
          case 20:
            { return new Symbol(URL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 65: break;
          case 21:
            { return new Symbol(TITULO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 66: break;
          case 22:
            { return new Symbol(OPCIONES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 67: break;
          case 23:
            { return new Symbol(CONT_CONSULTA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 68: break;
          case 24:
            { return new Symbol(CONSULTAS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 69: break;
          case 25:
            { return new Symbol(CONSULTA_N,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 70: break;
          case 26:
            { return new Symbol(FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 71: break;
          case 27:
            { return new Symbol(CREAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 72: break;
          case 28:
            { return new Symbol(FIN_SOLICITUD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 73: break;
          case 29:
            { return new Symbol(INI_SOLICITUD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 74: break;
          case 30:
            { return new Symbol(LOGIN_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 75: break;
          case 31:
            { return new Symbol(TEXTO_VISIBLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 76: break;
          case 32:
            { return new Symbol(CONSULTAR_DATOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 77: break;
          case 33:
            { return new Symbol(FIN_SOLICITUDES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 78: break;
          case 34:
            { return new Symbol(INI_SOLICITUDES,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 79: break;
          case 35:
            { return new Symbol(ELIMINAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 80: break;
          case 36:
            { return new Symbol(NUEVO_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 81: break;
          case 37:
            { return new Symbol(MODIFICAR_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 82: break;
          case 38:
            { return new Symbol(AGREGAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 83: break;
          case 39:
            { return new Symbol(ELIMINAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 84: break;
          case 40:
            { return new Symbol(ELIMINAR_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 85: break;
          case 41:
            { return new Symbol(CREDENCIALES_USUARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 86: break;
          case 42:
            { return new Symbol(MODIFICAR_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 87: break;
          case 43:
            { return new Symbol(MODIFICAR_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 88: break;
          case 44:
            { return new Symbol(PARAMETROS_COMPONENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 89: break;
          case 45:
            { return new Symbol(PARAMETROS_FORMULARIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
